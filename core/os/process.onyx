package core.os

#if !runtime.platform.Supports_Processes {
    #error "Cannot include this file. Platform not supported.";
}

use core {Pair, cptr, Result, tprintf}
use core.array
use core.io
use runtime

use runtime.platform {
    __process_spawn,
    __process_destroy,
    __process_kill,
    __process_read,
    __process_write,
    __process_wait,
    ProcessData
}

#doc """
    Represents a spawned OS process.
"""
Process :: struct {
    use stream: io.Stream;
    process_handle: ProcessData;
}

#doc """
    Represents options for process creation.
"""
ProcessSpawnOpts :: struct {
    capture_io: bool;
    non_blocking_io: bool; 
    detach: bool; // setsid on linux
    dir: str;
    environment: [] Pair(str, str);
}

#doc """
    Spawns a new OS process. This operation is always assumed to succeed.
    To determine if the operation failed, use `process_wait` and look for the
    `FailedToRun` state.
"""
process_spawn :: #match #local -> Process {}

#overload
process_spawn :: (path: str, args: [] str, non_blocking_io := false, starting_directory := "") -> Process {
    opts := ProcessSpawnOpts.{
        capture_io = true,
        non_blocking_io = non_blocking_io,
        detach = false,
        dir = starting_directory,
        environment = .{},
    };

    return process_spawn(path, args, &opts);
}

#overload
process_spawn :: (path: str, args: [] str, opts: &ProcessSpawnOpts) -> Process {
    env_data := null;
    if opts.environment {
        env: [..] cptr(u8);
        for &e in opts.environment {
            key_value := tprintf("{}={}\0", e.first, e.second);
            env << cptr.make(key_value.data);
        }
        env << .{ 0 };

        env_data = env.data;
    }

    handle := __process_spawn(path, args, env_data, opts);

    return .{
        .{ &process_stream_vtable },
        handle,
    };
}

#doc "Force kills a subprocess."
process_kill :: (use p: &Process) -> bool {
    return __process_kill(process_handle);
}

#doc "Waits for a process to exit."
process_wait :: (use p: &Process) => {
    return __process_wait(process_handle);
}

#doc "Frees internal resources used by a process. Should be called after process_kill or process_wait."
process_destroy :: (use p: &Process) => {
    __process_destroy(process_handle);
}

#local Process_Read_Error :: enum {
    None         :: 0x00;
    Process_Dead :: 0x01;
    Unknown      :: 0x02; 
}

#local process_stream_vtable := io.Stream_Vtable.{
    read = (use p: &Process, buffer: [] u8) -> (io.Error, u32) {
        // Read from the process stdout
        if cast(i64) process_handle == 0 do return .BadFile, 0;

        bytes_read := __process_read(process_handle, buffer);
        if bytes_read < 0 {
            switch cast(Process_Read_Error) -bytes_read {
                case .None do return .None, 0;
                case .Process_Dead do return .EOF, 0;
                case .Unknown do return .BadFile, 0;
            }
        }
        return .None, bytes_read;
    },

    write = (use p: &Process, buffer: [] u8) -> (io.Error, u32) {
        // Write to the process stdin
        if cast(i64) process_handle == 0 do return .BadFile, 0;

        bytes_written := __process_write(process_handle, buffer);
        return .None, bytes_written;
    },

    close = (use p: &Process) -> io.Error {
        process_kill(p);
        return .None;
    }
}

#doc """
    Represents exit states of a process.

    This is not the best format for this data, as it is impossible to get the exit status.
"""
ProcessResult :: enum {
    Success     :: 0x00;
    FailedToRun :: 0x01;
    Error       :: 0x02;
    InternalErr :: 0x03;
}

#doc """
    Represents the exit state and output of a process.
"""
ProcessResultOutput :: struct {
    result: ProcessResult;
    output: str;
}


//
// Builder pattern for processes
//

#doc """
    Stores configuration used by the builder pattern for processes.
"""
Command :: struct {
    _path: str;
    _args: [..] str;
    _env: [..] Pair(str, str);
    _dir: str;

    _process: ? Process;
    _opts: ProcessSpawnOpts;
}

#doc """
    Produces a new `Command` for the process builder.

        os.command()
            ->path("executable_path")
            ->args(.["argument", "list"])
            ->run();
"""
command :: () -> &Command {
    return new(Command);
}

#doc "Sets the path of the command."
Command.path :: (cmd: &Command, path: str) -> &Command {
    cmd._path = path;
    return cmd;
}

#doc "Appends arguments to the argument array of the command."
Command.args :: (cmd: &Command, args: [] str) -> &Command {
    array.concat(&cmd._args, args);
    return cmd;
}

#doc "Sets an environment variable."
Command.env :: (cmd: &Command, key, value: str) -> &Command {
    cmd._env << .{ key, value };
    return cmd;
}

#doc "Sets the working directory of the command."
Command.dir :: (cmd: &Command, dir: str) -> &Command {
    cmd._dir = dir;
    return cmd;
}

#doc "Runs the command, wait until it completes, and capture output."
Command.output :: (cmd: &Command) -> Result(str, ProcessResultOutput) {
    if !cmd._process {
        cmd._opts.capture_io = true;
        cmd._opts.non_blocking_io = false;
        cmd._opts.detach = false;

        cmd->start();
        if !cmd._process do return .{ Err = .{ .Error, "" } };
    }

    r := io.reader_make(cmd._process->unwrap_ptr());
    output := io.read_all(&r);
    io.reader_free(&r);

    res := cmd->wait();
    if res != .Success {
        return .{ Err = .{ res, output } };
    }

    return .{ Ok = output };
}

#doc "Runs the command and waits until it completes."
Command.run :: (cmd: &Command) -> ProcessResult {
    cmd->start();
    return cmd->wait();
}

#doc "Starts the command with the mapped I/O."
Command.start_with_output :: (cmd: &Command) -> &Command {
    cmd._opts.capture_io = true;
    return cmd->start();
}

#doc "Starts the command."
Command.start :: (cmd: &Command) -> &Command {
    cmd._opts.environment = cmd._env;
    cmd._opts.dir = cmd._dir;

    cmd._process = process_spawn(cmd._path, cmd._args, &cmd._opts);
    return cmd;
}

#doc "Wait for the command to complete."
Command.wait :: (cmd: &Command) -> ProcessResult {
    if !cmd._process do return .Error;

    res := process_wait(cmd._process->unwrap_ptr());
    process_destroy(cmd._process->unwrap_ptr());

    cmd->destroy();
    return res;
}

#doc "Destroys all internal information of a command. Automatically called by `Command.wait`."
Command.destroy :: (cmd: &Command) {
    delete(&cmd._args);
    delete(&cmd._env);
    cfree(cmd);
}

