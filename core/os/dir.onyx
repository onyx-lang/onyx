package core.os

#if !runtime.platform.Supports_Directories {
    #error "Cannot include this file. Platform not supported."
}

use core.string
use core.conv
use runtime

#local fs :: runtime.platform

Directory :: fs.DirectoryData

DirectoryEntry :: struct {
    type        : FileType
    identifier  : u32
    name_length : u32
    name_data   : [256] u8

    name :: (use dir: &DirectoryEntry) => str.{ ~~name_data, name_length }
}

dir_open :: (path: str) -> (Directory, bool) {
    dir: Directory
    success := fs.__dir_open(path, &dir)
    return dir, success
}

dir_close :: (dir: Directory) {
    fs.__dir_close(dir)
}

dir_read :: (dir: Directory, out_entry: &DirectoryEntry) -> bool {
    return fs.__dir_read(dir, out_entry)
}

dir_create :: fs.__dir_create
dir_exists :: fs.__file_exists
dir_remove :: fs.__dir_remove
dir_rename :: fs.__file_rename

chdir  :: fs.__chdir
getcwd :: fs.__getcwd

list_directory :: (path: str) -> Iterator(DirectoryEntry) {
    Context :: struct {
        dir: Directory
        opened := false
    }

    next :: (use c: &Context) -> ? DirectoryEntry {
        if !opened do return .None

        entry: DirectoryEntry
        if !dir_read(dir, &entry) {
            return .None
        }

        return entry
    }

    close :: (use c: &Context) {
        if opened {
            dir_close(dir)
        }

        cfree(c)
    }

    c := new(Context)
    if dir, success := dir_open(path); success {
        c.dir = dir
        c.opened = true
    }

    return .{ c, next, close }
}

remove_directory :: (path: str) -> bool {
    // This is quite a bit of space, and could result in a stack overrun
    // if the directory being deleted has a lot of descendents.
    full_path_buffer: [512] u8

    for list_directory(path) {
        full_path := conv.format(full_path_buffer, "{}{}{}", path, PATH_SEP, it->name())

        if it.type == .Directory {
            if !remove_directory(full_path) do return false
        } else {
            remove_file(full_path)
        }
    }

    return dir_remove(path);    
}
