package onyx.compiler_extension
#allow_stale_code

use core {
    stdio
    Result
}
use core.alloc {package, arena}
use core.encoding.osad
use core.io

// PROTOCOL VERSION 1
// 
// OUTGOING
//
// INIT (0)             send info about extension
//     version (u32)
//     name (str)
//
// REPORT (1)           report an error
//     position (Position)
//     msg (str)
//
// EXPANSION (2)        response to ExpandMacro
//     id (u32)
//     code (Result(str, Reason))
//
// INJECT (3)           add code to top level scope
//     code (str)
//
//
// INCOMING
//
// INIT (0)
//     version_major (u32)
//     version_minor (u32)
//     version_patch (u32)
//     max_protocol_version (u32)
//
// TERMINATE (1)
//
// EXPANDMACRO (2)
//     id (u32)
//     location (ExpansionLocation)
//     position (Position)
//     macro_name (str)
//     body (str)
//

// PROTOCOL VERSION 2 CHANGES
//
// OUTGOING INIT (0)
//     added `hooks ([] i32)` after `name`
//
// OUTGOING ACKNOWLEDGEHOOK (4)
//     Added
//
// INCOMING HOOK (3)
//     Added


// Types

IncomingMessage :: union {
    Init as 0: struct {
        compiler_version_major: u32
        compiler_version_minor: u32
        compiler_version_patch: u32

        max_protocol_version_supported: u32
    }

    Terminate as 1: struct {
    }

    ExpandMacro as 2: ExpansionInfo

    Hook as 3: struct {
        id: u32
        info: HookInfo
    }
}

OutgoingMessage :: union {
    Init as 0: struct {
        protocol_version: u32
        name: str

        hooks: [] i32
    }

    ErrorReport as 1: struct {
        position: Position
        msg: str
    }

    Expansion as 2: struct {
        id: u32
        code: Result(str, ExpansionFailureReason)
    }

    InjectCode as 3: struct {
        code: str
    }

    AcknowledgeHook as 4: struct {
        id: u32
    }
}

ExpansionInfo :: struct {
    id: u32
    location: ExpansionLocation
    position: Position
    macro_name: str
    body: str
}

ExpansionLocation :: enum {
    Expression
    Statement
    TopLevelStatement
}

ExpansionFailureReason :: enum {
    NotSupported
    BadSyntax
}

Position :: struct {
    filename: str
    line: u32
    column: u32
    length: u32
}

HookInfo :: union {
    None: void

    Stalled: struct {}

    Count: void
}


// Code

ExtensionContext :: struct {
    protocol_version: u32
    name: str
    proc_macros: Map(str, #type (&ExtensionContext, ExpansionInfo) -> Result(str, ExpansionFailureReason))
    hook_handlers: [cast(i32) HookInfo.tag_enum.Count] (&ExtensionContext, HookInfo) -> void

    arena: arena.Arena

    reader: io.Reader

    running: bool
}

ExtensionContext.make :: (name: str) -> (res: ExtensionContext) {
    res.name = name
    res.protocol_version = 2

    res.proc_macros = make(typeof res.proc_macros)
    res.arena = arena.make(context.allocator, 32 * 1024)
    res.reader = io.Reader.make(&stdio.stream)
    return
}

ExtensionContext.start :: (self: &#Self, callback: (&#Self, msg: IncomingMessage) -> void) {
    self.running = true

    while self.running {
        msg: IncomingMessage
        if !osad.deserialize(&msg, typeof msg, &self.reader, alloc.as_allocator(&self.arena)) {
            break
        }

        switch msg {
            case .Init as &init {
                use hooks := make([..] i32)
                for h, i in self.hook_handlers {
                    if h != null_proc {
                        hooks->push(i)
                    }
                }

                self->send(.{
                    Init = .{
                        protocol_version = self.protocol_version
                        name = self.name
                        hooks = hooks
                    }
                })
            }

            case .Terminate do break break

            case .Hook as &hk {
                handler := self.hook_handlers[~~~ hk.info.tag]

                if handler != null_proc {
                    handler(self, hk.info)
                }

                self->send(.{
                    AcknowledgeHook = .{
                        id = hk.id
                    }
                })
            }

            case .ExpandMacro as em {
                if self.proc_macros->has(em.macro_name) {
                    handler := self.proc_macros->get(em.macro_name)->unwrap()
                    result  := handler(self, em)
                    self->send(.{
                        Expansion = .{
                            id = em.id,
                            code = result
                        }
                    })

                } else {
                    fallthrough
                }
            }

            case _ {
                callback(self, msg)
            }
        }

        alloc.arena.clear(&self.arena)
    }
}

ExtensionContext.send :: (self: &#Self, msg: OutgoingMessage) {
    use stdout_writer := io.Writer.make(&stdio.stream)

    osad.serialize(msg, &stdout_writer)
}

ExtensionContext.handle_macro :: (self: &#Self, name: str, func: (&ExtensionContext, ExpansionInfo) -> Result(str, ExpansionFailureReason)) {
    self.proc_macros->put(name, func)
}

ExtensionContext.handle_hook :: (self: &#Self, hook: HookInfo.tag_enum, func: (&ExtensionContext, HookInfo) -> void) {
    self.hook_handlers[~~hook] = func
}



map_position :: (base_pos: Position, pos: Position) => {
    line := do {
        if pos.line == 1 do return base_pos.line;
        return pos.line + base_pos.line - 1;
    };

    column := do {
        if pos.line == 1 do return base_pos.column + pos.column - 1;
        return pos.column;
    };

    return Position.{
        filename = base_pos.filename,
        line = line,
        column = column,
        length = pos.length
    };
}

