package core

//
// Sometimes when interfacing with libraries from C, it is really helpful
// to be able to represent pointers to things outside of the bounds of the
// WASM memory. For one concrete example, glGetString takes an enum and
// procudes a character pointer to a static string with that enum's name.
// Without this library, it would be impossible to access this memory,
// without first copying it into the WASM memory. That requires a lot of
// overhead, so instead this library allows Onxy to access memory outside
// the normal bounds.
//
// cptr(T) is a C-pointer to a value of type T. It has a couple useful
// methods, namely: read(), extract_str(), and to_rawptr().
//

@conv.Custom_Format.{ #solidify cptr.format {T=T} }
cptr :: struct (T: type_expr) {
    data: u64;
}

//
// Creates a new C-pointer from an Onyx pointer.
cptr.make :: macro (ptr: &$T) -> cptr(T) {
    __cptr_make :: __cptr_make
    return .{ __cptr_make(ptr) };
}

//
// Extract the data out of a C pointer into a buffer in the Onyx memory.
cptr.read :: #match {
    //
    // Special, error-inducing case for cptr(void)
    (this: cptr(void)) -> void { },

    (this: cptr($T)) -> T {
        buf: [sizeof T] u8;
        __cptr_read(this.data, ~~buf, sizeof T);
        return *cast(&T) buf;
    },

    (this: cptr($T), buffer: [] u8) {
        __cptr_read(this.data, ~~buffer.data, buffer.length);
    }
}

//
// Helper procedures for quickly reading an integer of various sizes.
cptr.read_u8  :: (this: cptr(u8))  => __cptr_read_u8(this.data);
cptr.read_u16 :: (this: cptr(u16)) => __cptr_read_u16(this.data);
cptr.read_u32 :: (this: cptr(u32)) => __cptr_read_u32(this.data);
cptr.read_u64 :: (this: cptr(u64)) => __cptr_read_u64(this.data);
cptr.read_i8  :: (this: cptr(i8))  => cast(i8)  __cptr_read_u8(this.data);
cptr.read_i16 :: (this: cptr(i16)) => cast(i16) __cptr_read_u16(this.data);
cptr.read_i32 :: (this: cptr(i32)) => cast(i32) __cptr_read_u32(this.data);
cptr.read_i64 :: (this: cptr(i64)) => cast(i64) __cptr_read_u64(this.data);

//
// When given a non-zero-sized dest, this procedure
// fills the dest buffer with the contents of the string
// up to the number bytes in the dest buffer. This
// procedure returns the length of the string as given
// by strlen(). This exists because iterating byte by byte
// using __cptr_read_u8 would be slow compared to strlen().
cptr.extract_str :: (this: cptr(u8), dest: [] u8) => __cptr_extract_str(this.data, dest);

//
// This procedure attempts to convert a C-pointer back into an
// Onyx pointer, if the pointer lives with the Onyx memory space.
cptr.to_rawptr :: (this: cptr($T)) -> &T {
    // I'm treating NULL as more of a concept, than as an actual value here,
    // because if something returns a NULL pointer, it should logically map
    // to the same idea as 'null' in Onyx.
    if this.data == 0 do return null;

    use core.intrinsics.wasm
    // Using 1 instead of 0 because a null pointer (0) converts
    // to the memory address 0, not the base address for the WASM
    // memory.
    mem_base_ptr := __cptr_make(cast(rawptr) 1);
    assert(mem_base_ptr <= this.data + 1 && (this.data + 1) >> 16 <= mem_base_ptr + ~~(wasm.memory_size()), "Invalid conversion from cptr to rawptr: pointer value out of Onyx memory range.");
    return ~~(this.data - mem_base_ptr + 1);
}

cptr.as_unsafe :: (this: cptr($T), $new_type: type_expr) -> cptr(new_type) {
    return .{ this.data };
}

cptr.at :: (this: cptr($T), index: i32) -> T {
    elem := this + index;
    return elem->read();
}

cptr.format :: (output: &conv.Format_Output, format: &conv.Format, p: &cptr($T)) {
    conv.format(output, "cptr({})[0x{b16}]", T, p.data);
}


//
// Allows for pointer addition.
#operator + macro (p: cptr($T), v: i32) -> cptr(T) {
    return .{ p.data + ~~(v * sizeof T) };
}

#local {
    #foreign "onyx_runtime" {
        __cptr_make        :: (x: rawptr) -> u64 ---
        __cptr_read        :: (x: u64, dest: rawptr, size: u32) -> void ---
        __cptr_read_u8     :: (x: u64) -> u8 ---
        __cptr_read_u16    :: (x: u64) -> u16 ---
        __cptr_read_u32    :: (x: u64) -> u32 ---
        __cptr_read_u64    :: (x: u64) -> u64 ---
        __cptr_extract_str :: (x: u64, dest: [] u8) -> u32 ---

        //
        // The equivalent write instructions are pusposefully left out.
        // Until a VERY CONVINCING REASON as to why they must be included
        // arises, including them is more of a security vulnerability than
        // I am willing to have.
        //
    }
}
