package onyx.compiler.native
#allow_stale_code

//
// This package contains bindings to the Onyx compiler for Onyx.
//


/// GENERATED BY ONYX CBINDGEN

use core { cptr }

onyx_option_t :: enum {
    NO_OP :: 0
    CURRENT_DIRECTORY :: 1
    POST_MVP_FEATURES :: 2
    MULTI_THREADING :: 3
    GENERATE_FOREIGN_INFO :: 4
    GENERATE_TYPE_INFO :: 5
    GENERATE_METHOD_INFO :: 6
    GENERATE_DEBUG_INFO :: 7
    GENERATE_STACK_TRACE :: 8
    GENERATE_NAME_SECTION :: 9
    GENERATE_SYMBOL_INFO :: 10
    GENERATE_LSP_INFO :: 11
    GENERATE_DOC_INFO :: 12
    DISABLE_CORE :: 13
    DISABLE_STALE_CODE :: 14
    OPTIONAL_SEMICOLONS :: 15
    DISABLE_FILE_CONTENTS :: 16
    DISABLE_EXTENSIONS :: 17
    COLLECT_PERF :: 18
    PLATFORM :: 19
}

onyx_pump_t :: enum {
    CONTINUE :: 0
    DONE :: 1
    ERRORED :: 2
}

onyx_platform_t :: enum {
    ONYX :: 1
    WASI :: 2
    JS :: 3
    CUSTOM :: 4
}

onyx_error_t :: enum {
    WARNING :: 2
    WAITING :: 3
    CRITICAL :: 4
    CLI :: 5
}

onyx_output_type_t :: enum {
    WASM :: 0
    JS :: 1
    ODOC :: 2
    OSYM :: 3
    INJECTED_CODE :: 4
}

onyx_stat_t :: enum {
    FILE_COUNT :: 1
    LINE_COUNT :: 2
    TOKEN_COUNT :: 3
}

onyx_event_type_t :: enum {
    UNKNOWN :: 0
    LOG :: 1
    PHASE_START :: 2
    SYMBOL_DEFINED :: 3
    ALL_TYPES_CHECKED :: 4
}

onyx_context_t :: #distinct u64

#local __foreign_block :: #foreign "onyx_autocompiler" {
    onyx_version_major :: () -> i32 ---
    onyx_version_minor :: () -> i32 ---
    onyx_version_patch :: () -> i32 ---
    onyx_version_suffix :: () -> cptr(u8) ---
    onyx_version_build_time :: () -> cptr(u8) ---
    onyx_version_runtime :: () -> cptr(u8) ---
    onyx_context_create :: () -> onyx_context_t ---
    onyx_context_free :: (ctx: onyx_context_t) -> void ---
    onyx_options_ready :: (ctx: onyx_context_t) -> void ---
    onyx_pump :: (ctx: onyx_context_t) -> onyx_pump_t ---
    onyx_event_count :: (ctx: onyx_context_t) -> i32 ---
    onyx_event_type :: (ctx: onyx_context_t, event_idx: i32) -> onyx_event_type_t ---
    onyx_event_field_int :: (ctx: onyx_context_t, event_idx: i32, field: [&] u8) -> i32 ---
    onyx_event_field_str :: (ctx: onyx_context_t, event_idx: i32, field: [&] u8) -> cptr(u8) ---
    onyx_set_option_cstr :: (ctx: onyx_context_t, opt: onyx_option_t, value: [&] u8) -> i32 ---
    onyx_set_option_bytes :: (ctx: onyx_context_t, opt: onyx_option_t, value: str) -> i32 ---
    onyx_set_option_int :: (ctx: onyx_context_t, opt: onyx_option_t, value: i32) -> i32 ---
    onyx_add_defined_var :: (ctx: onyx_context_t, variable: str, value: str) -> void ---
    onyx_include_file :: (ctx: onyx_context_t, filename: str) -> void ---
    onyx_add_mapped_dir :: (ctx: onyx_context_t, mapped_name: str, dir: str) -> void ---
    onyx_inject_code :: (ctx: onyx_context_t, code: str) -> void ---
    onyx_error_count :: (ctx: onyx_context_t) -> i32 ---
    onyx_error_message :: (ctx: onyx_context_t, error_idx: i32) -> cptr(u8) ---
    onyx_error_filename :: (ctx: onyx_context_t, error_idx: i32) -> cptr(u8) ---
    onyx_error_line :: (ctx: onyx_context_t, error_idx: i32) -> i32 ---
    onyx_error_column :: (ctx: onyx_context_t, error_idx: i32) -> i32 ---
    onyx_error_length :: (ctx: onyx_context_t, error_idx: i32) -> i32 ---
    onyx_error_line_text :: (ctx: onyx_context_t, error_idx: i32, line_buffer: [] u8) -> i32 ---
    onyx_error_rank :: (ctx: onyx_context_t, error_idx: i32) -> onyx_error_t ---
    onyx_output_length :: (ctx: onyx_context_t, type: onyx_output_type_t) -> i32 ---
    onyx_output_write :: (ctx: onyx_context_t, type: onyx_output_type_t, buffer: [&] u8) -> void ---
    onyx_stat :: (ctx: onyx_context_t, stat: onyx_stat_t) -> i32 ---
    onyx_stat_filepath :: (ctx: onyx_context_t, file_index: i32) -> cptr(u8) ---
    onyx_run_wasm :: (buffer: [] u8, argc: i32, argv: [&] cptr(u8)) -> void ---
    onyx_run_wasm_with_debug :: (buffer: [] u8, argc: i32, argv: [&] cptr(u8), socket_path: [&] u8) -> void ---
}


// Export the foreign block symbol if foreign block
// metadata was produced for this build because we
// are likely doing codegen for the C file for this
// library

use runtime
#if #defined(runtime.Generated_Foreign_Info) {
    foreign_block :: __foreign_block
} else {
    #library "onyx_autocompiler"
}

