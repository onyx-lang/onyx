// Currently, these symbols are dumped in the 'core' namespace, which means
// most programs that just 'use core' can access all of them, which
// is convenient; However, it doesn't hurt to wonder if they should be the
// 'core.io' package so these would become like 'io.printf(...)'. Of course,
// you could always still do 'use core.io', which would bring these
// in anyway.
package core

use runtime


//
// Ensure this file did not get included in a custom runtime, as it is
// not possible to print anything if the runtime is not known. This check
// could be replaced with something like !#defined(runtime.__output_string),
// but that can happen when custom runtimes are more needed.
#if runtime.runtime == .Custom {
    #error "'stdio' cannot be used in a custom runtime."
}

//
// Every thread contains its own copy of standard input and output options.
#thread_local stdio : struct {
    // Two-way stream of standard input and output.
    stream       : io.Stream;

    // These fields are used to create a buffer of standard output.
    print_stream : io.BufferStream;
    print_writer : io.Writer;

    // When this is true, the print_stream is flushed when the last character
    // is a newline. When this is false, all flushing is entirely manual.
    auto_flush : bool;
}

//
// Internal procedure called at thread initialization to setup the
// `stdio` object. This should not be called more than once per thread,
// so you will likely never need to call it.
__stdio_init :: () {
    stdio.print_stream = io.buffer_stream_make(2048, context.allocator);
    stdio.print_writer = io.writer_make(&stdio.print_stream, 0);

    stdio.stream = .{ vtable = &stdio_vtable, flags = .Block_On_Read };

    stdio.auto_flush = true;
}


//
// Internal procedure to flush data from the print_stream to standard
// output. Can be used directly, or through io.stream_flush(&stdio.stream);
__flush_stdio :: () {
    if stdio.print_stream.data.count == 0 do return;

    &stdio.print_stream
        |> io.buffer_stream_to_str()
        |> runtime.platform.__output_string();

    &stdio.print_stream |> io.stream_flush();
}

//
// Generic procedure to print something. This is normally not used
// directly, but does support passing a different number of arguments
// that are sent directly to io.write.
print :: #match #locked {
    (x: str) {
        if !x do return;

        io.write(&stdio.print_writer, x);
        if x[x.count - 1] == #char "\n" && stdio.auto_flush do __flush_stdio();
    },

    (x)    => { io.write(&stdio.print_writer, x); },
    (x, y) => { io.write(&stdio.print_writer, x, y); },
}

//
// Helper procedure that prints something, then prints a newline.
println :: (x) => {
    use core
    core.print(x);
    core.print("\n");
}

//
// Standard formatted print to standard output.
printf :: (format: str, va: ..any) {
    buffer: [1024] u8;
    print(conv.format_va(buffer, format, va, .{ null,
        (_: rawptr, to_output: str) -> bool {
            io.write(&stdio.print_writer, to_output);
            __flush_stdio();
            return true;
        }
    }));
}

#if #defined(runtime.platform.__output_error) {
    //
    // Prints to standard error, if available.
    eprintf :: (format: str, va: ..any) {
        buffer: [1024] u8;
        runtime.platform.__output_error(
            conv.format_va(buffer, format, va, .{
                null,
                (ctx: rawptr, to_output: str) -> bool {
                    runtime.platform.__output_error(to_output);
                    return true;
                }
            })
        );
    }
}

//
// Prints to a dynamically allocated string, and returns the string.
// It is the callers responsibility to free the string.
aprintf :: (format: str, va: ..any) -> str {
    buffer: [8196] u8;
    out := conv.format_va(buffer, format, va);
    return string.alloc_copy(out);
}

//
// Prints to a dynamically allocated string in the temporary allocator,
// and returns the string. 
tprintf :: (format: str, va: ..any) -> str {
    buffer: [8196] u8;
    out := conv.format_va(buffer, format, va);
    return string.alloc_copy(out, allocator=context.temp_allocator);
}


//
// Helper procedure that outputs a set of bytes at a certain location,
// useful in debugging. The implementation does not use printf or
// stdio.stream, because if those are corrupted due to a heap/memory
// bug, they cannot be used.
__byte_dump :: (ptr: rawptr, byte_count: u32, bytes_per_line := 8) {
    temp: [3] u8;

    u8_ptr := cast([&] u8) ptr;
    for i in byte_count {
        val := u8_ptr[i];

        temp[0] = map_to_ascii(val >> 4);
        temp[1] = map_to_ascii(val & 15);
        temp[2] = #char " ";

        runtime.platform.__output_string(~~temp);

        if i % bytes_per_line == (bytes_per_line - 1) do runtime.platform.__output_string("\n");
    }


    map_to_ascii :: (x: u8) -> u8 {
        return switch x {
            case 0 =>  #char "0";
            case 1 =>  #char "1";
            case 2 =>  #char "2";
            case 3 =>  #char "3";
            case 4 =>  #char "4";
            case 5 =>  #char "5";
            case 6 =>  #char "6";
            case 7 =>  #char "7";
            case 8 =>  #char "8";
            case 9 =>  #char "9";
            case 10 => #char "A";
            case 11 => #char "B";
            case 12 => #char "C";
            case 13 => #char "D";
            case 14 => #char "E";
            case 15 => #char "F";
            case #default => #char "X";
        };
    }
}


//
// Private and internal things
//

//
// The v-table for the stream in stdio.
#local stdio_vtable := io.Stream_Vtable.{
    read = (_: &io.Stream, buffer: [] u8) -> (io.Error, u32) {
        __flush_stdio();
        bytes_read := runtime.platform.__read_from_input(buffer);
        if bytes_read <= 0 do return .EOF, 0;

        return .None, bytes_read;
    },

    read_byte = (_: &io.Stream) -> (io.Error, u8) {
        __flush_stdio();
        buf: [1] u8;
        bytes_read := runtime.platform.__read_from_input(buf);
        if bytes_read <= 0 do return .EOF, 0;

        return .None, buf[0];
    },

    write = (_: &io.Stream, buffer: [] u8) -> (io.Error, u32) {
        return io.stream_write(&stdio.print_stream, buffer);
    },

    write_byte = (_: &io.Stream, byte: u8) -> io.Error {
        return io.stream_write_byte(&stdio.print_stream, byte);
    },

    flush = (_: &io.Stream) -> io.Error {
        __flush_stdio();
        return .None;
    },

    poll = (_: &io.Stream, ev: io.PollEvent, timeout: i32) -> (io.Error, bool) {
        // TODO: This might not be right, as maybe sometimes you can't actually
        // write because a the output was closed?
        if ev == .Write do return .None, true;

        return .None, runtime.platform.__wait_for_input(timeout);
    }
}
