package core.io

use core
use core {*}

Stream :: struct {
    use vtable : &Stream_Vtable;
    flags: Stream_Flags;
}

// These flags are used by things like io.Reader as hints
// for how the stream will behave under certain circumstances.
Stream_Flags :: enum #flags {
    // This flags signals that any call to stream_read *could*
    // block for arbitrary amounts of time.
    Block_On_Read;
}

Stream_Vtable :: struct {
    seek         : (s: &Stream, to: i32, whence: SeekFrom) -> Error            = null_proc;
    tell         : (s: &Stream) -> (Error, u32)                                = null_proc;

    read         : (s: &Stream, buffer: [] u8) -> (Error, u32)                 = null_proc;
    read_at      : (s: &Stream, at: u32, buffer: [] u8) -> (Error, u32)        = null_proc;
    read_byte    : (s: &Stream) -> (Error, u8)                                 = null_proc;

    write        : (s: &Stream, buffer: [] u8) -> (Error, u32)                 = null_proc;
    write_at     : (s: &Stream, at: u32, buffer: [] u8) -> (Error, u32)        = null_proc;
    write_byte   : (s: &Stream, byte: u8) -> Error                             = null_proc;

    close        : (s: &Stream) -> Error                                       = null_proc;
    flush        : (s: &Stream) -> Error                                       = null_proc;

    size         : (s: &Stream) -> i32                                         = null_proc;

    poll         : (s: &Stream, ev: PollEvent, timeout: i32) -> (Error, bool)  = null_proc;
}

PollEvent :: enum {
    None :: 0x00;
    Read :: 0x01;
    Write :: 0x02;
    Closed :: 0x03;
}

SeekFrom :: enum {
    Start   :: 0x00;
    Current :: 0x01;
    End     :: 0x02;    
}

stream_seek :: (use s: &Stream, to: i32, whence: SeekFrom) -> Error {
    if vtable == null do return .NoVtable;
    if vtable.seek == null_proc do return .NotImplemented;

    return vtable.seek(s, to, whence);
}

stream_tell :: (use s: &Stream) -> (Error, u32) {
    if vtable == null do return .NoVtable, 0;
    if vtable.tell == null_proc do return .NotImplemented, 0;
    
    return vtable.tell(s);
}

stream_read :: (use s: &Stream, buffer: [] u8) -> (Error, u32) {
    if vtable == null do return .NoVtable, 0;
    if vtable.read == null_proc do return .NotImplemented, 0;
    
    return vtable.read(s, buffer);
}

stream_read_at :: (use s: &Stream, at: u32, buffer: [] u8) -> (Error, u32) {
    if vtable == null do return .NoVtable, 0;
    if vtable.read_at == null_proc do return .NotImplemented, 0;
    
    return vtable.read_at(s, at, buffer);
}

stream_read_byte :: (use s: &Stream) -> (Error, u8) {
    if vtable == null do return .NoVtable, cast(u8) 0;
    if vtable.read_byte == null_proc do return .NotImplemented, 0;
    
    return vtable.read_byte(s);
}

stream_read_until_full :: (use s: &Stream, buffer: [] u8) -> (Error, u32) {
    if vtable == null do return .NoVtable, 0;
    if vtable.read == null_proc do return .NotImplemented, 0;

    bytes_read := 0;
    while bytes_read < buffer.count {
        err, r := vtable.read(s, buffer[bytes_read .. buffer.length]);
        bytes_read += r;

        if err != .ReadPending && err != .ReadLater && err != .None {
            return err, bytes_read;
        }
    }

    return .None, bytes_read;
}

stream_write :: (use s: &Stream, buffer: [] u8) -> (Error, u32) {
    if vtable == null do return .NoVtable, 0;
    if vtable.write == null_proc do return .NotImplemented, 0;
    
    return vtable.write(s, buffer);
}

stream_write_at :: (use s: &Stream, at: u32, buffer: [] u8) -> (Error, u32) {
    if vtable == null do return .NoVtable, 0;
    if vtable.write_at == null_proc do return .NotImplemented, 0;
    
    return vtable.write_at(s, at, buffer);
}

stream_write_byte :: (use s: &Stream, byte: u8) -> Error {
    if vtable == null do return .NoVtable;
    if vtable.write_byte == null_proc do return .NotImplemented;
    
    return vtable.write_byte(s, byte);
}

stream_close :: (use s: &Stream) -> Error {
    if vtable == null do return .NoVtable;
    if vtable.close == null_proc do return .NotImplemented;

    return vtable.close(s);
}

stream_flush :: (use s: &Stream) -> Error {
    if vtable == null do return .NoVtable;
    if vtable.flush == null_proc do return .NotImplemented;

    return vtable.flush(s);
}

stream_size :: (use s: &Stream) -> i32 {
    if vtable == null do return 0;
    if vtable.size == null_proc do return 0;

    return vtable.size(s);
}

/// Waits until a stream is able to be read from or written to.
///
/// If `timeout` < 0, then there is an indefinite timeout.
/// 
/// If `timeout` = 0, then there is no timeout, and this function returns immediately.
///
/// If `timeout` > 0, then there is a `timeout` millisecond delay before returning false.
stream_poll :: (use s: &Stream, ev: PollEvent, timeout: i32) -> (Error, bool) {
    if vtable == null do return .NoVtable, false;
    if vtable.poll == null_proc do return .NotImplemented, false;

    return vtable.poll(s, ev, timeout);
}


//
// BufferStream
//
// In older times of the standard library, there were two string
// streams that existed for different purposes in StringStream and
// DynamicStringStream. I have since merged them into one stream
// called, BufferStream. Besides the names being confusing and
// long, I thought it was needlessly complicated to have two
// kinds of streams for what feels like the same task.
//
// When creating a BufferStream, there are two options:
//      - You can pass a single integer, will which represent
//          the initial size of the buffer. An initial buffer
//          will be allocated using the allocator provided.
//          This buffer will be write enabled, and not fixed,
//          so it can grow to as (theoretically) large as
//          necessary.
//
//      - You can pass an existing slice. The behavior of this
//          buffer depend on the other arguments. If you set
//          write_enabled to false, then writing will not be allowed
//          into this buffer. This is good practice if you only
//          plan on using the stream as a read-only output for
//          io.Reader.  If you enable writing, then you can
//          decided if the buffer is fixed or not. If the buffer
//          is fixed, the provided buffer will be used without
//          allocating anything, and the data written will go
//          directly into the provided slice. Obviously, when
//          fixed is true, the buffer cannot grow and might result
//          in filling the buffer and losing information. An .EOF
//          error is returned in that case. If you pass fixed as
//          false, the provided buffer will be copied into a new
//          dynamic array. Note, the cursor still starts at index
//          0, so you have to use stream_tell to move the cursor
//          to the correct spot (This behavior might change in the
//          future). 
//                 
// Remember to free the buffer using buffer_stream_free or delete.
//
// Note, if write_enabled is false, buffer_stream_to_str will return
// the null string, as convert a non-writable buffer to a string does
// not have a great natural definition.


BufferStream :: struct {
    use stream : Stream;

    data: [..] u8;
    curr_pos := 0;

    write_enabled := true;
    fixed         := false;
}

buffer_stream_make :: #match #locked {
    (initial_data: [] u8, allocator := context.allocator, fixed := false, write_enabled := true) -> BufferStream {
        if !write_enabled {
            return .{
                .{ vtable = &buffer_stream_vtable },
                data = .{
                    data = initial_data.data,
                    count = initial_data.count
                    // This does not specify the allocator,
                    // but since write_enabled is false,
                    // this should never be resized.
                },
                write_enabled = false,
                fixed         = true
            };
        }

        // Make a copy of the data using the provided allocator.
        data: [..] u8 = .{ initial_data.data, initial_data.count, initial_data.count };
        if !fixed {
            data = array.make(initial_data, allocator);
        }

        return .{ .{ vtable = &buffer_stream_vtable }, data, fixed=fixed };
    },

    (initial_size := 1024, allocator := context.allocator) -> BufferStream {
        return .{
            .{ vtable = &buffer_stream_vtable },
            make([..] u8, initial_size, allocator = allocator)
        };
    }
}

#match builtin.delete buffer_stream_free
buffer_stream_free :: (use bs: &BufferStream) {
    if write_enabled && !fixed {
        delete(&data);
    }
}

#match core.string.as_str buffer_stream_to_str
buffer_stream_to_str :: (use bs: &BufferStream) -> str {
    if !write_enabled do return null_str;

    return data[0 .. curr_pos];
}

#package
buffer_stream_vtable := Stream_Vtable.{
    seek = (use ss: &BufferStream, to: i32, whence: SeekFrom) -> Error {
        if to >= data.count do return .OutOfBounds;

        switch whence {
            case SeekFrom.Start   do curr_pos = to;
            case SeekFrom.Current do curr_pos += to;
            case SeekFrom.End     do curr_pos = data.count - to; // CHECK: Off by one?
        }

        return .None;
    },

    tell = (use ss: &BufferStream) -> (Error, u32) {
        return .None, curr_pos;
    },

    read = (use ss: &BufferStream, buffer: [] u8) -> (Error, u32) {
        if curr_pos >= data.count do return .EOF, 0;

        bytes_to_read := math.min(buffer.count, data.count - curr_pos);
        memory.copy(buffer.data, &data.data[curr_pos], bytes_to_read);
        curr_pos += bytes_to_read;

        return .None, bytes_to_read;
    },

    read_at = (use ss: &BufferStream, at: u32, buffer: [] u8) -> (Error, u32) {
        if at >= data.count do return .EOF, 0;

        bytes_to_read := math.min(buffer.count, data.count - at);
        memory.copy(buffer.data, &data.data[at], bytes_to_read);

        return .None, bytes_to_read;
    },

    read_byte = (use ss: &BufferStream) -> (Error, u8) {
        if curr_pos >= data.count do return .EOF, 0;

        defer curr_pos += 1;
        return .None, data[curr_pos];
    },

    write = (use dss: &BufferStream, buffer: [] u8) -> (Error, u32) {
        if !write_enabled do return .NotImplemented, 0;

        if curr_pos + buffer.count >= data.capacity {
            if fixed do return .EOF, 0;
            if !array.ensure_capacity(&data, curr_pos + buffer.count) do return .EOF, 0;
        }

        memory.copy(&data.data[curr_pos], buffer.data, buffer.count);
        curr_pos   += buffer.count;
        data.count  = math.max(data.count, curr_pos);

        return .None, buffer.count;
    },

    write_at = (use dss: &BufferStream, at: u32, buffer: [] u8) -> (Error, u32) {
        if !write_enabled do return .NotImplemented, 0;

        if at + buffer.count >= data.capacity {
            if fixed do return .EOF, 0;
            if !array.ensure_capacity(&data, at + buffer.count) do return .EOF, 0;
        }

        memory.copy(&data.data[at], buffer.data, buffer.count);
        data.count = math.max(data.count, at + buffer.count);

        return .None, buffer.count;
    },

    write_byte = (use dss: &BufferStream, byte: u8) -> Error {
        if !write_enabled do return .NotImplemented;

        if curr_pos + 1 >= data.capacity {
            if fixed do return .EOF;
            if !array.ensure_capacity(&data, data.count + 1) do return .EOF;
        }

        data[curr_pos] = byte;
        curr_pos   += 1;
        data.count  = math.max(data.count, curr_pos);

        return .None;
    },

    size = (use dss: &BufferStream) -> i32 {
        return data.count;
    },

    flush = (use dss: &BufferStream) -> Error {
        if !write_enabled || fixed do return .NotImplemented;

        curr_pos = 0;
        array.clear(&data);

        return .None;
    },

    close = (use dss: &BufferStream) -> Error {
        if write_enabled && !fixed {
            delete(&data);
        }

        return .None;
    },

    poll = (use dss: &BufferStream, ev: io.PollEvent, timeout: i32) -> (Error, bool) {
        if ev == .Write && !write_enabled {
            return .None, false;
        }

        return .None, true;
    }
}

