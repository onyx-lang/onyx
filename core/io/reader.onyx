package core.io

// Reader is a buffered reader over a Stream.
// If you do not need a buffered reader, simply
// use the stream_read functions to read from the
// stream. Because Reader is buffered, there are
// several things it can do that a non-buffered
// reader could not, like 'read the next line',
// or 'read until a period'.

use core.memory
use core.math
use core.array
use core.iter

Reader :: struct {
    stream: &Stream;

    buffer: [] u8;
    buffer_allocator: Allocator;

    start, end: u32; // The start and ending positions of the edges of the buffer "window".    
    last_byte: i32;

    error: Error;
    done: bool; // If an .EOF was reached.
}

Reader.is_empty :: reader_empty;
Reader.empty    :: reader_empty;
Reader.read_all :: read_all;
Reader.read_byte :: read_byte;
Reader.unread_byte :: unread_byte;
Reader.read_bytes :: read_bytes;
Reader.read_fill_buffer :: read_fill_buffer;
Reader.read_string :: read_string;
Reader.read_i32 :: read_i32;
Reader.read_i64 :: read_i64;
Reader.read_u32 :: read_u32;
Reader.read_u64 :: read_u64;
Reader.read_line :: read_line;
Reader.read_word :: read_word;
Reader.read_until :: read_until;
Reader.peek_byte :: peek_byte;
Reader.advance_line :: advance_line;
Reader.skip_whitespace :: skip_whitespace;
Reader.skip_bytes :: skip_bytes;
Reader.lines :: lines;

reader_make :: (s: &Stream, buffer_size := 4096, allocator := context.allocator) -> Reader {
    assert(s.vtable != null, "Stream vtable was not setup correctly.");

    reader: Reader;
    reader.stream = s;
    reader.error = .None;

    memory.alloc_slice(&reader.buffer, buffer_size, allocator);
    reader.buffer_allocator = allocator;

    reader_reset(&reader);

    return reader;
}

reader_reset :: (use reader: &Reader) {
    start, end = 0, 0;
    last_byte = #char "\0";
    done = false;
}

#overload delete :: reader_free
reader_free :: (use reader: &Reader) {
    memory.free_slice(&buffer, buffer_allocator);
}

// You need to free the StringStream from the context.allocator when you use this. For example,
//      reader, stream := reader_from_string(s);
//      defer cfree(stream);
reader_from_string :: (s: str) -> (Reader, &BufferStream) {
    stream_ptr := new(BufferStream);
    *stream_ptr = buffer_stream_make(s, fixed=true, write_enabled=false);

    return reader_make(stream_ptr), stream_ptr;
}

reader_get_buffered :: (use reader: &Reader) -> i32 {
    return end - start;
}

reader_empty :: (use reader: &Reader) -> bool {
    return done && reader_get_buffered(reader) == 0;
}

read_all :: (use reader: &Reader, allocator := context.allocator) -> [] u8 {
    output := array.make(u8, 128, allocator=allocator);

    while !reader_empty(reader) {
        buffered := reader_get_buffered(reader);
        if buffered > 0 {
            array.ensure_capacity(&output, output.count + buffered);
            memory.copy(output.data + output.count, buffer.data, buffered);
            output.count += buffered;
            start = end;
        }

        if err := reader_read_next_chunk(reader); err != .None && err != .ReadPending {
            break;
        }

        if error != .None && error != .ReadPending && error != .EOF {
            reader_consume_error(reader);
            break;
        }
    }

    return output;
}

read_byte :: (use reader: &Reader) -> u8 {
    while start == end {
        if reader_empty(reader) do return 0;

        if error != .None {
            reader_consume_error(reader);
            return 0;
        }

        if err := reader_read_next_chunk(reader); err != .None {
            return 0;
        }
    }

    byte := buffer[start];
    start += 1;
    last_byte = cast(i32) byte;
    return byte;
}

unread_byte :: (use reader: &Reader) -> Error {
    if last_byte < 0 || (start == 0 && end > 0) {
        return .InvalidUnread;
    }

    if start > 0 {
        start -= 1;
    } else {
        end = 1;
    }

    buffer[start] = cast(u8) last_byte;
    last_byte = -1;
    return .None;
}

//
// This function tries to fill the bytes buffer full of data.
// However, if the reader is empty or if the underlying stream
// returns ReadPending, this function may only fill part / none
// of the buffer. If the function exits with a .None error, the
// buffer is filled completely.
read_bytes :: (use reader: &Reader, bytes: [] u8) -> (i32, Error) {
    n := bytes.count;
    if n == 0 {
        if reader_get_buffered(reader) > 0 do return 0, .None;
        return 0, reader_consume_error(reader);
    }

    write_index := 0;
    while n > 0 && !reader_empty(reader) {
        if start < end {
            to_write := math.min(n, end - start);
            memory.copy(bytes.data + write_index, buffer.data + start, to_write);
            n -= to_write;
            write_index += to_write;
            start += to_write;
        }

        if n == 0 do break;

        if  err := reader_read_next_chunk(reader);
            err == .ReadPending || err == .ReadLater
        {
            return write_index, err;
        }
    }

    last_byte = cast(i32) bytes[write_index - 1];
    return write_index, .None;
}

read_string :: (use reader: &Reader, bytes := 1, allocator := context.allocator) -> str {
    buf := memory.make_slice(u8, bytes, allocator);
    bytes_read, err := read_bytes(reader, buf);
    return buf[0 .. bytes_read];
}

read_fill_buffer :: (use reader: &Reader, bytes: [] u8) -> Error {
    n := bytes.count;
    if n == 0 {
        if reader_get_buffered(reader) > 0 do return .None;
        return reader_consume_error(reader);
    }

    write_index := 0;
    while n > 0 && !reader_empty(reader) {
        to_write := math.min(n, end - start);
        memory.copy(bytes.data + write_index, buffer.data + start, to_write);
        n -= to_write;
        write_index += to_write;
        start += to_write;

        if n > 0 {
            reader_read_next_chunk(reader);
        }
    }

    last_byte = cast(i32) bytes[write_index - 1];

    if reader_empty(reader) && n > 0 {
        return .EOF;
    }

    return .None;
}

read_i32 :: (use reader: &Reader) -> i32 {
    n: i32 = 0;

    skip_whitespace(reader);

    is_negative := false;
    curr, err := peek_byte(reader);
    if curr == #char "-" {
        is_negative = true;
        start += 1;
    }

    curr, err = peek_byte(reader);
    while curr >= #char "0" && curr <= #char "9" {
        n *= 10;
        n += cast(u32) (curr - #char "0"); 

        start += 1;
        curr, err = peek_byte(reader);
        if err != .None || start == end do break;
    }

    if is_negative do n = -n;
    return n;
}

read_i64 :: (use reader: &Reader) -> i64 {
    n: i64 = 0;

    skip_whitespace(reader);

    is_negative := false;
    curr, err := peek_byte(reader);
    if curr == #char "-" {
        is_negative = true;
        start += 1;
    }

    curr, err = peek_byte(reader);
    while curr >= #char "0" && curr <= #char "9" {
        n *= 10;
        n += cast(u64) (curr - #char "0"); 

        start += 1;
        curr, err = peek_byte(reader);
        if err != .None || start == end do break;
    }

    if is_negative do n = -n;
    return n;
}

read_u32 :: (use reader: &Reader) -> u32 {
    n: u32 = 0;

    skip_whitespace(reader);

    curr, err := peek_byte(reader);
    while curr >= #char "0" && curr <= #char "9" {
        n *= 10;
        n += cast(u32) (curr - #char "0"); 

        start += 1;
        curr, err = peek_byte(reader);
        if err != .None || start == end do break;
    }

    return n;
}

read_u64 :: (use reader: &Reader) -> u64 {
    n: u64 = 0;

    skip_whitespace(reader);

    curr, err := peek_byte(reader);
    while curr >= #char "0" && curr <= #char "9" {
        n *= 10;
        n += cast(u64) (curr - #char "0"); 

        start += 1;
        curr, err = peek_byte(reader);
        if err != .None || start == end do break;
    }

    return n;
}

read_line :: (use reader: &Reader, consume_newline := true, allocator := context.allocator, inplace := false) -> str {
    //
    // Reading in place is special. It does not make a special allocation for the data,
    // instead just return a pointer to the internal data.
    if inplace {
        // If reading is done inplace, the start of the buffer should be the start
        // of the data known. This makes the longest possible line be buffer.count
        // in length.
        while reader_read_next_chunk(reader) == .ReadPending ---

        count := start;
        defer start = count;

        while count < end && buffer[count] != #char "\n" {
            count += 1;
        }

        if consume_newline && count < end {
            count += 1;
        }

        return buffer[start .. count];
    }

    out := make(dyn_str, allocator);

    while done := false; !done {
        if start == end {
            while reader_read_next_chunk(reader) == .ReadPending ---
        }

        count := start;
        while count < end && buffer[count] != #char "\n" {
            count += 1;
        }

        if buffer[count] == #char "\n" {
            if consume_newline && count < end do count += 1;
            done = true;
        }

        if count != start {
            array.ensure_capacity(&out, out.count + (count - start));
            memory.copy(out.data + out.count, buffer.data + start, count - start);
            out.count += count - start;
            start = count;
        }

        if !done {
            while reader_read_next_chunk(reader) == .ReadPending ---
            if error == .NoProgress do done = true;
        }

        if reader_empty(reader) do done = true;
    }

    return out;
}

read_word :: (use reader: &Reader, numeric_allowed := false, allocator := context.allocator, inplace := false) -> str {
    skip_whitespace(reader);
    while reader_read_next_chunk(reader) == .ReadPending {
        skip_whitespace(reader);
    }

    //
    // Reading in place is special. It does not make a special allocation for the data,
    // instead just return a pointer to the internal data.
    if inplace {
        // If reading is done inplace, the start of the buffer should be the start
        // of the data known. This makes the longest possible line be buffer.count
        // in length.
        while reader_read_next_chunk(reader) == .ReadPending ---

        count := start;
        defer start = count;

        while count < end {
            curr := buffer[count];
            if  (curr >= #char "a" && curr <= #char "z") ||
                (curr >= #char "A" && curr <= #char "Z") ||
                 curr == #char "_" {
                count += 1;
            } elseif numeric_allowed && (curr >= #char "0" && curr <= #char "9") {
                count += 1;
            } else {
                break;
            }
        }

        return buffer[start .. count];
    }

    out := make(dyn_str, allocator);

    while done := false; !done {
        count := start;
        while count < end {
            curr := buffer[count];
            if  (curr >= #char "a" && curr <= #char "z") ||
                (curr >= #char "A" && curr <= #char "Z") ||
                 curr == #char "_" {
                count += 1;
            } elseif numeric_allowed && (curr >= #char "0" && curr <= #char "9") {
                count += 1;
            } else {
                done = true;
                break;
            }
        }

        if count != start {
            array.ensure_capacity(&out, out.count + (count - start));
            memory.copy(out.data + out.count, buffer.data + start, count - start);
            out.count += count - start;
            start = count;
        }

        if !done {
            while reader_read_next_chunk(reader) == .ReadPending ---
            if error == .NoProgress do done = true;
        }

        if reader_empty(reader) do done = true;
    }

    return out;
}

read_until :: (use reader: &Reader, until: u8, skip: u32 = 0, allocator := context.allocator, consume_end := false, inplace := false) -> str {
    //
    // Reading in place is special. It does not make a special allocation for the data,
    // instead just return a pointer to the internal data.
    if inplace {
        // If reading is done inplace, the start of the buffer should be the start
        // of the data known. This makes the longest possible line be buffer.count
        // in length.
        while reader_read_next_chunk(reader) == .ReadPending ---

        count := start;
        defer start = count;

        while count < end {
            curr := buffer[count];
            if curr != until {
                count += 1;
            } else {
                if skip == 0 do break;
                else do skip -= 1;
            }
        }

        if consume_end && count < end {
            count += 1;
        }

        return buffer[start .. count];
    }

    out := make(dyn_str, allocator);

    while done := false; !done {
        count := start;
        while count < end {
            curr := buffer[count];
            if curr != until {
                count += 1;
            } else {
                if skip == 0 do break;
                else do skip -= 1;
            }
        }

        if buffer[count] == until {
            if consume_end && count < end do count += 1;
            done = true;
        }

        if count != start {
            array.ensure_capacity(&out, out.count + (count - start));
            memory.copy(out.data + out.count, buffer.data + start, count - start);
            out.count += count - start;
            start = count;
        }

        if !done {
            while reader_read_next_chunk(reader) == .ReadPending ---
            if error == .NoProgress do done = true;
        }

        if reader_empty(reader) do done = true;
    }

    return out;
}

peek_byte :: (use reader: &Reader, advance := 0) -> (u8, Error) {
    if reader_empty(reader) do return 0, .EOF;

    if start == end {
        if fill_err := reader_read_next_chunk(reader); fill_err != .None {
            return 0, fill_err;
        }
    }

    if start + advance >= end {
        return 0, .EOF;
    }

    return buffer[start + advance], .None;
}

advance_line :: (use reader: &Reader) {
    if reader_empty(reader) do return;

    while true {
        if start == end {
            if fill_err := reader_read_next_chunk(reader); fill_err != .None {
                return;
            }
        }

        defer start += 1;
        if buffer[start] == #char "\n" {
            return;
        }
    }
}

skip_whitespace :: (use reader: &Reader) {
    if reader_empty(reader) do return;

    while start < end {
        if start == end {
            if fill_err := reader_read_next_chunk(reader); fill_err != .None {
                return;
            }
        }

        switch buffer[start] {
            case #char " ", #char "\t", #char "\n", #char "\r" {
                start += 1;
            }

            case #default do return;
        }
    }
}

skip_bytes :: (use reader: &Reader, bytes: u32) -> (i32, Error) {
    if bytes == 0 do return 0, .None;
    if reader_empty(reader) do return 0, .EOF;

    remaining := bytes;
    while true {
        skip := reader_get_buffered(reader);
        if skip == 0 {
            if fill_err := reader_read_next_chunk(reader); fill_err != .None {
                return 0, fill_err;
            }

            skip = reader_get_buffered(reader);
        }

        skip = math.min(skip, remaining);
        start += skip;
        remaining -= skip;

        if remaining == 0 do return bytes, .None;

        if error != .None {
            return bytes - remaining, reader_consume_error(reader);
        }
    }

    return 0, .None;
}

lines :: (r: &Reader, inplace := false, allocator := context.allocator) =>
    iter.generator(&.{
        r = r,
        inplace = inplace,
        allocator = allocator,
    }, (ctx: $C) -> (str, bool) {
        line := ctx.r->read_line(consume_newline=true, inplace=ctx.inplace, allocator=ctx.allocator);

        if line.count > 0 do return line, true;
        else do return "", false;
    });


#local reader_consume_error :: (use reader: &Reader) -> Error {
    defer error = .None;
    return error;
}


//
// This function serves two purposes:
//     - Shifting the remaining data in the buffer to the start.
//       This ensures the start member will be equal to 0.
//     - Filling the empty space left in the buffer after the shift.
//
// There are only two cases where the buffer will not be filled completely.
//     - The stream returns ReadPending. This is not an critical error, but
//       does mean that the reading process should stop and be tried again later.
//     - The stream returns anything other than None. This error is silently stored
//       and be fetched using reader_consume_error later.
#local reader_read_next_chunk :: (use reader: &Reader) -> Error {
    if start > 0 {
        // This assumes that memory.copy behaves like memmove, in that the
        // buffer may overlap, but it should do the right thing.
        memory.copy(buffer.data, buffer.data + start, end - start);
        end -= start;
        start = 0;
    }

    if done do return .None;

    if end >= buffer.count {
        return .BufferFull;
    }

    // If this stream will block on a read, use the data that is present
    // in the buffer currently. In theory, it would be better to have a
    // 'stream_poll' that tests if the next read would block, but that
    // can happen later.
    if end > 0 && stream.flags & .Block_On_Read {
        _, data_available := stream_poll(stream, .Read, 0);
        if !data_available do return .None;
    }

    err, n := stream_read(stream, buffer[end .. buffer.count]);
    
    //
    // ReadPending is not an error, just a signal that data is not ready
    // to be read, so this should try again later. This has to return None
    // if the end is equal to start because that means that the buffer is
    // completely empty.
    if err == .ReadPending || err == .ReadLater {
        error = err;
        return err if end == 0 else .None;
    }

    end += n;
    if err != .None {
        if err == .EOF     do done = true;
        if err == .BadFile do done = true;

        error = err;
        return .None;
    }

    if n > 0 {
        return .None;
    }

    done = true;
    error = .NoProgress;
    return .None;
}
