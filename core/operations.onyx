package builtin

//
// This file contains builtin operator overloads.
// It's in a separate file because we need to defer resolution of some definitions
// until certain types are defined (namely builtin code used for math operators).
//

//
// Allows for comparing `package_id`s
#operator == macro (p1, p2: package_id) => cast(u32) p1 == cast(u32) p2;
#operator != macro (p1, p2: package_id) => cast(u32) p1 != cast(u32) p2;

//
// Allows for basic array programming support

// Array w/ array operations
#operator + macro (l, r: [$N]$T) => __array_op_array(l, r, [a, b](a + b));
#operator - macro (l, r: [$N]$T) => __array_op_array(l, r, [a, b](a - b));
#operator * macro (l, r: [$N]$T) => __array_op_array(l, r, [a, b](a * b));
#operator / macro (l, r: [$N]$T) => __array_op_array(l, r, [a, b](a / b));

// Array w/ scalar operations
#operator + macro (l: [$N]$T, r: T) => __array_op_scalar(l, r, [a, b](a + b));
#operator - macro (l: [$N]$T, r: T) => __array_op_scalar(l, r, [a, b](a - b));
#operator * macro (l: [$N]$T, r: T) => __array_op_scalar(l, r, [a, b](a * b));
#operator / macro (l: [$N]$T, r: T) => __array_op_scalar(l, r, [a, b](a / b));

#operator == macro (l, r: [$N]$T) => memory_equal(cast(rawptr)l, cast(rawptr)r, N * sizeof T);
#operator != macro (l, r: [$N]$T) => !(l == r);

memory_equal :: (a: rawptr, b: rawptr, count: i32) -> bool #intrinsic --- // So we don't have to include core.intrinsics

__array_op_array :: macro (l, r: [$N]$T, $body: Code) -> [N]T {
    res: [N]T;
    for 0..N do res[it] = #unquote body(l[it], r[it]);
    return res;
}

__array_op_scalar :: macro (l: [$N]$T, r: T, $body: Code) -> [N]T {
    res: [N]T;
    for 0..N do res[it] = #unquote body(l[it], r);
    return res;
}



//
// Builtin for expansions

#overload
__for_expansion :: macro (_s: [] $T, $flags: __For_Expansion_Flags, $body: Code) where !(flags & .BY_POINTER) {
    s     := _s
    data  := s.data
    count := s.count

    i := 0
    while i < count {
        defer i += 1

        v := data[i]
        #unquote body(v, i) #scope(body)
    }
}

#overload
__for_expansion :: macro (_s: [] $T, $flags: __For_Expansion_Flags, $body: Code) where (flags & .BY_POINTER) {
    s     := _s
    data  := s.data
    count := s.count

    i := 0
    while i < count {
        defer i += 1

        v := &data[i]
        #unquote body(v, i) #scope(body)
    }
}

#overload
__for_expansion :: macro (_r: range, $flags: __For_Expansion_Flags, $body: Code) where (body.capture_count == 1) {
    r    := _r
    i    := r.low
    end  := r.high
    step := r.step
    
    while true {
        if step >= 0 && i >= end do break
        if step <  0 && i <  end do break
        
        defer i += step

        #unquote body(i) #scope(body)
    }
}

#overload
__for_expansion :: macro (_r: range, $flags: __For_Expansion_Flags, $body: Code) where (body.capture_count == 2) {
    r    := _r
    i    := r.low
    end  := r.high
    step := r.step
    
    #if #defined(body.capture_type_2) {
        j: body.capture_type_2
    } else {
        j: i32
    }

    while true {
        if step >= 0 && i >= end do break
        if step <  0 && i <  end do break
        
        defer i += step
        defer j += 1

        #unquote body(i, j) #scope(body)
    }
}

#overload
__for_expansion :: macro (_r: range64, $flags: __For_Expansion_Flags, $body: Code) where (body.capture_count == 1) {
    r    := _r
    i    := r.low
    end  := r.high
    step := r.step
    
    while true {
        if step >= 0 && i >= end do break
        if step <  0 && i <  end do break
        
        defer i += step

        #unquote body(i) #scope(body)
    }
}

#overload
__for_expansion :: macro (_r: range64, $flags: __For_Expansion_Flags, $body: Code) where (body.capture_count == 2) {
    r    := _r
    i    := r.low
    end  := r.high
    step := r.step
    
    #if #defined(body.capture_type_2) {
        j: body.capture_type_2
    } else {
        j: i32
    }

    while true {
        if step >= 0 && i >= end do break
        if step <  0 && i <  end do break
        
        defer i += step
        defer j += 1

        #unquote body(i, j) #scope(body)
    }
}

#overload
__for_expansion :: macro (n: i32, $flags: __For_Expansion_Flags, $body: Code) {
    i    := 0
    end  := n
    
    while i < end {
        defer i += 1

        #unquote body(i) #scope(body)
    }
}

#overload
__for_expansion :: macro (n: i64, $flags: __For_Expansion_Flags, $body: Code) {
    i    : i64 = 0
    end  : i64 = n
    
    while i < end {
        defer i += 1

        #unquote body(i) #scope(body)
    }
}

