package core.string

use core {package, *}

#doc "Generic procedure for turning something into a string."
as_str :: #match -> str {}

#local HasAsStrMethod :: interface (T: type_expr) {
    t as T;

    { T.as_str(t) } -> str;
}

#overload #order 10000
as_str :: macro (t: $T/HasAsStrMethod) -> str {
    return T.as_str(t);
}



free :: #match #locked {
    (s: str, allocator := context.allocator) { raw_free(allocator, s.data); },
    (s: &dyn_str) { core.array.free(s); },
}

alloc_copy :: (original: str, allocator := context.allocator) -> str {
    if original.count == 0 do return .{};

    new_str : str;
    new_str.data = raw_alloc(allocator, sizeof u8 * original.count);
    new_str.count = original.count;
    copy(original, new_str);
    return new_str;
}

temp_copy :: (original: str) -> str {
    if original.count == 0 do return .{};

    new_str := make([] u8, original.count, allocator=context.temp_allocator);
    copy(original, new_str);
    return new_str;
}

copy :: (orig: str, dest: str) {
    len := orig.count;
    if dest.count < len do len = dest.count;

    memory.copy(dest.data, orig.data, len);
}

#match as_str from_cstr
from_cstr :: (s: cstr) -> str {
    return .{ data = s, count = length(s) };
}

#doc """
    Converts a `str` into a `cstr` by copying the memory of the string to the stack,
    with an additional byte at the end that is set to 0, to correctly for a C-string.

    This only needs to be done when the string does not contain a `\0` byte on the end,
    which is most of the time. If you know that the string has a `\0` byte, simply use `s.data`.
"""
to_cstr_on_stack :: macro (s_: str) -> cstr {
    use core.alloc
    use core.memory

    s := s_;
    result := alloc.from_stack(sizeof u8 * (s.count + 1));
    memory.set(result, 0, s.count + 1);
    memory.copy(result, s.data, s.count);

    return result;
}


length :: #match #local {}

#overload
length :: (s: str) => s.count;

#overload
length :: (s: cstr) -> u32 {
    len := 0;
    c: [&] u8 = s;
    while c[0] != #char "\0" {
        len += 1;
        c += 1;
    }

    return len;
}


concat :: #match #local {}

#overload
concat :: (s1: str, s2: str, allocator := context.allocator) -> str {
    len1 := length(s1);
    len2 := length(s2);

    data := cast([&] u8) raw_alloc(allocator, len1 + len2);
    memory.copy(data, s1.data, len1);
    memory.copy(data + len1, s2.data, len2);

    return str.{ data, len1 + len2 };
}

// @Cleanup // Don't love that the allocator is necessary here,
// but it is impossible to specify a default value for the
// allocator while having a variadic number of strings. This
// is only due to the languages constraints however. This
// could easily be changed since there is no ambiguity.
#overload
concat :: (allocator: Allocator, strings: ..str) -> str {
    total_length := 0;
    for s in strings do total_length += s.count;

    data := cast([&] u8) raw_alloc(allocator, total_length);
    offset := 0;
    for s in strings {
        memory.copy(data + offset, s.data, s.count);
        offset += s.count;
    }

    return str.{ data, total_length };
}

#overload
concat :: (buffer: [] u8, strings: ..str) -> str {
    total_copied := 0;
    for s in strings {
        // Should never greater than, but better safe than sorry.
        if total_copied >= buffer.count do break;

        bytes_to_copy := math.min(s.count, buffer.count - total_copied);
        memory.copy(buffer.data + total_copied, s.data, bytes_to_copy);
        total_copied += bytes_to_copy;
    }

    return buffer[0 .. total_copied];
}

#overload
concat :: (into: &[..] u8, strings: ..str) -> str {
    for s in strings {
        array.ensure_capacity(into, into.count + s.count);
        memory.copy(into.data + into.count, s.data, s.count);
        into.count += s.count;
    }
    return .{ into.data, into.count };
}

#overload
concat :: (into: &[..] u8, chars: ..u8) -> str {
    array.ensure_capacity(into, into.count + chars.count);
    for c in chars {
        memory.copy(into.data + into.count, cast(rawptr) &.[c], 1);
        into.count += 1;
    }
    return .{ into.data, into.count };
}


contains :: #match #local {}

#overload
contains :: (s: str, c: u8) -> bool {
    for ch in s do if ch == c do return true;
    return false;
}

#overload
contains :: (s: str, substr: str) -> bool {
    while i := 0; i < s.count {
        defer i += 1;

        while j := 0; j < substr.count {
            if s[i + j] != substr[j] {
                continue continue;
            }

            j += 1;
        }

        return true;
    }

    return false;
}


join :: (strs: [] str, sep: str, allocator := context.allocator) -> str {
    if strs.count == 0 do return "";

    len_sum := array.fold(strs, 0, [v, acc](acc + v.length));
    out := make(str, len_sum + (strs.count - 1) * sep.count);

    i := 0;
    for strs {
        if !#first {
            core.memory.copy(&out.data[i], sep.data, sep.count);
            i += sep.count;
        }

        core.memory.copy(&out.data[i], it.data, it.count);
        i += it.count;
    }

    return out;
}


// @TODO
// Check this for edge cases and other bugs. I'm not confident
// it will work perfectly yet.                   - brendanfh 2020/12/21
compare :: (str1: str, str2: str) -> i32 {
    i := 0;
    while i < str1.count && i < str2.count {
        if str1[i] == str2[i] do i += 1;
        else                  do break;
    }

    if i == str1.count && i == str2.count do return 0;
    return ~~(str1[i] - str2[i]);
}

equal :: (str1: str, str2: str) -> bool {
    if str1.count != str2.count do return false;
    while i := 0; i < str1.count {
        if str1[i] != str2[i] do return false;
        i += 1;
    }
    return true;
}

equal_insensitive :: (s1, s2: str) -> bool {
    if s1.count != s2.count do return false;
    while i := 0; i < s1.count {
        defer i += 1;
        if s1[i] == s2[i] do continue;

        c1 := s1[i];
        c2 := s2[i];
        if c1 >= #char "A" && c1 <= #char "Z" do c1 += 32;
        if c2 >= #char "A" && c2 <= #char "Z" do c2 += 32;
        if c1 != c2 do return false;
    }
    return true;
}

#operator == equal
#operator != macro (s1: str, s2: str) => !(s1 == s2);

starts_with :: (s: str, prefix: str) -> bool {
    if s.count < prefix.count do return false;
    while i := 0; i < prefix.count {
        if s[i] != prefix[i] do return false;
        i += 1;
    }
    return true;
}

ends_with :: (s: str, suffix: str) -> bool {
    if s.count < suffix.count do return false;
    while i := 0; i < suffix.count {
        if s[s.count - 1 - i] != suffix[suffix.count - 1 - i] do return false;
        i += 1;
    }
    return true;
}

empty    :: (s: str) => s.count == 0 || s.data == null;

is_empty :: (s: str) -> bool #deprecated "Use 'string.empty' instead." {
    return s.count == 0 || s.data == null;
}

index_of :: #match #local {}

#overload
index_of :: (s: str, c: u8) -> i32 {
    for s.count {
        if s[it] == c do return it;
    }
    return -1;
}

#overload
index_of :: (s: str, substr: str) -> i32 {
    while i := 0; i < s.count {
        defer i += 1;

        while j := 0; j < substr.count {
            if s[i + j] != substr[j] {
                continue continue;
            }

            j += 1;
        }

        return i;
    }

    return -1;
}

last_index_of :: (s: str, c: u8) -> i32 {
    for range.{s.count-1, 0, -1} {
        if s[it] == c do return it;
    }
    return -1;
}


strip_whitespace :: #match #local {}

#overload
strip_whitespace :: (s: &str) {
    strip_leading_whitespace(s);
    strip_trailing_whitespace(s);
}

#overload
strip_whitespace :: (s:  str) =>
    s |> strip_leading_whitespace() |> strip_trailing_whitespace()


strip_leading_whitespace :: #match #local {}

#overload
strip_leading_whitespace :: (s: &str) {
    while s.count > 0 do switch s.data[0] {
        case #char " ", #char "\t", #char "\n", #char "\r" {
            s.data += 1;
            s.count -= 1;
        }

        case #default do return;
    }
}

#overload
strip_leading_whitespace :: (s: str) -> str {
    out := s;
    strip_leading_whitespace(&out);
    return out;
}


strip_trailing_whitespace :: #match #local {}

#overload
strip_trailing_whitespace :: (s: &str) {
    while s.count >= 1 do switch s.data[s.count - 1] {
        case #char " ", #char "\t", #char "\n", #char "\r" {
            s.count -= 1;
        }

        case #default do return;
    }
}

#overload
strip_trailing_whitespace :: (s: str) -> str {
    out := s;
    strip_trailing_whitespace(&out);
    return out;
}

to_uppercase :: (s: str) -> str {
    for& ch in s {
        if *ch >= #char "a" && *ch <= #char "z" {
            *ch -= 32;
        }
    }

    return s;
}

to_lowercase :: (s: str) -> str {
    for& ch in s {
        if *ch >= #char "A" && *ch <= #char "Z" {
            *ch += 32;
        }
    }

    return s;
}


trim_start :: #match #local {}

#overload
trim_start :: (s: &str, char: u8) {
    while s.data[0] == char {
        s.data += 1;
        s.count -= 1;
    }
}

#overload
trim_start :: (s: str, char: u8) -> str {
    out := s;
    trim_start(&out, char);
    return out;
}


trim_end :: #match #local {}

#overload
trim_end :: (s: &str, char: u8) {
    while s.data[s.count - 1] == char {
        s.count -= 1;
    }
}

#overload
trim_end :: (s: str, char: u8) -> str {
    out := s;
    trim_end(&out, char);
    return out;
}


advance :: #match #local {}

#overload
advance :: (s: &str, chars := 1) {
    chars = math.min(chars, s.count);

    s.data += chars;
    s.count -= chars;
}

#overload
advance :: (s: str, chars := 1) -> str {
    chars = math.min(chars, s.count);
    out := s;

    out.data += chars;
    out.count -= chars;

    return out;
}

replace :: (s: str, to_replace: u8, replace_with: u8) {
    for &c in s {
        if *c == to_replace do *c = replace_with;
    }
}

read_until :: #match #local {}

#overload
read_until :: (s: &str, upto: u8, skip := 0) -> str {
    if s.count == 0 do return "";

    out : str;
    out.data = s.data;
    out.count = 0;

    rem := skip;
    for ch in *s {
        if ch == upto {
            if rem <= 0 do break;
            else do rem -= 1;
        }

        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    return out;
}

#overload
read_until :: (s: &str, upto: str, skip := 0) -> str {
    if s.count == 0 do return "";

    out := str.{ data = s.data };

    rem := skip;
    i := 0;
    while i <= s.count - upto.count {
        match := true;
        j := i;
        for upto {
            if s.data[j] != it {
                match = false;
                break;
            }

            j += 1;
        }

        if match {
            if rem <= 0 do break;
            else do rem -= 1;
        }

        i += 1;
    }

    if i > s.count - upto.count {
        out = *s;
        s.data  += out.count;
        s.count  = 0;

    } else {
        out.count = i;
        s.data  += out.count;
        s.count -= out.count;
    }

    return out;
}

read_alphanum :: (s: &str) -> str {
    if s.count == 0 do return "";

    out : str;
    out.data = s.data;
    out.count = 0;

    for ch in *s {
        switch ch {
            case #char "a" .. #char "z",
                 #char "A" .. #char "Z",
                 #char "0" .. #char "9" {
                out.count += 1;
            }

            case #default {
                break break;
            }
        }
    }

    s.data += out.count;
    s.count -= out.count;

    return out;
}

read_until_any :: (s: &str, skip: u32, uptos: ..u8) -> str {
    if s.count == 0 do return "";

    out : str;
    out.data = s.data;
    out.count = 0;

    rem := skip;
    for ch in *s {
        for upto in uptos {
            if ch == upto {
                if rem <= 0 do break break;
                else do rem -= 1;
            }
        }

        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    return out;
}

advance_line :: (s: &str) {
    if s.count == 0 do return;

    adv := 0;
    while s.data[adv] != #char "\n" && adv <= s.count do adv += 1;

    s.data += adv + 1;
    s.count -= adv + 1;
}

split :: (s: str, delim: u8, allocator := context.allocator) -> []str {
    delim_count := 0;
    for i in 0 .. s.count do if s[i] == delim do delim_count += 1;

    strarr := cast([&] str) raw_alloc(allocator, sizeof str * (delim_count + 1));

    curr_str := 0;
    begin := 0;

    for i in 0 .. s.count {
        if s[i] == delim {
            strarr[curr_str] = s.data[begin .. i];
            begin = i + 1;
            curr_str += 1;
        }
    }

    strarr[curr_str] = s.data[begin .. s.count];

    return strarr[0 .. delim_count + 1];
}

split_iter :: #match #local {}

#overload
split_iter :: (s: str, delim: u8) -> Iterator(str) {
    return iter.generator(
        &.{ s = s, delim = delim },

        (ctx: &$T) -> (str, bool) {
            if string.empty(ctx.s) {
                return "", false;
            }

            ret: str;
            ret, ctx.s = bisect(ctx.s, ctx.delim);
            return ret, true;
        }
    );
}

#overload
split_iter :: (s: str, delim: str) -> Iterator(str) {
    return iter.generator(
        &.{ s = s, delim = delim },

        (ctx: &$T) -> (str, bool) {
            if string.empty(ctx.s) {
                return "", false;
            }

            ret: str;
            ret, ctx.s = bisect(ctx.s, ctx.delim);
            return ret, true;
        }
    );
}

//
// Splits a string into two parts, divided by the
// first instance of the provided character. Either
// string can be empty if the first instance of the
// character occurs at the very beginning or end of
// the string, or if it does not occur at all.
//
bisect :: #match #local {}

#overload
bisect :: (s: str, c: u8) -> (str, str) {
    index := index_of(s, c); 
    if index == -1 {
        return s, "";
    }

    return s[0 .. index], s[index+1 .. s.length];
}

#overload
bisect :: (s: str, substr: str) -> (str, str) {
    index := index_of(s, substr);
    if index == -1 {
        return s, "";
    }

    return s[0 .. index], s[index+substr.length .. s.length];
}

//
// Used by dyn_str
//

to_dyn_str :: (x: str, allocator := context.allocator) -> dyn_str {
    use core.array
    return array.make(x, allocator);
}

delete  :: macro (x: &dyn_str, idx: u32) -> u8 {
    use core.array
    return array.delete(x, idx);
}

append  :: #match {
    macro (x: &dyn_str, other: str) {
        use core.array
        array.concat(x, other);
    }, 

    macro (x: &dyn_str, other: u8) {
        use core.array
        array.push(x, other);
    }, 
}

clear   :: macro (x: &dyn_str) {
    use core.array
    array.clear(x);
}

retreat :: macro (x: &dyn_str, chars := 1) {
    use core.array
    array.pop(x, chars);
}

insert  :: #match #locked {
    macro (x: &dyn_str, idx: u32, new_str: str) -> bool {
        use core.array
        return array.insert(x, idx, new_str);
    },

    macro (x: &dyn_str, idx: u32, ch: u8) -> bool {
        use core.array
        return array.insert(x, idx, ch);
    }
}
