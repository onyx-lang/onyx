package core.random

use core
use runtime

/// The state of a random number generator.
Random :: struct {
    seed: i64;
}

/// Creates a new random number generator.
///
/// An initial seed can be passed in, otherwise the current UNIX time is used.
Random.make :: (seed: i64 = (#unquote __initial_value)) -> Random {
    return .{ seed };
}

/// Sets the seed of the random number generator.
Random.set_seed :: #match {
    (self: &Random, s: u32) { self.seed = ~~s; },
    (self: &Random, s: u64) { self.seed =   s; },
}

/// Generates a random 32-bit integer.
Random.int :: (self: &Random) -> u32 {
    s := self.seed * RANDOM_MULTIPLIER + RANDOM_INCREMENT;
    defer self.seed = s;
    return cast(u32) ((s >> 16) & ~~0xffffffff);
}

/// Generates a random 32-bit integer between `lo` and `hi`, inclusive.
Random.between :: (self: &Random, lo: i32, hi: i32) -> i32 {
    return self->int() % (hi + 1 - lo) + lo;
}

/// Generates a random floating point number between `lo` and `hi`.
Random.float :: (self: &Random, lo := 0.0f, hi := 1.0f) -> f32 {
    return (cast(f32) (self->int() % (1 << 23)) / cast(f32) (1 << 23)) * (hi - lo) + lo;
}

/// Returns a random element from a slice.
Random.choice :: (self: &Random, a: [] $T) -> T {
    return a[self->between(0, a.count - 1)];
}

/// Returns a random byte-array of length `bytes_long`.
///
/// If `alpha_numeric` is true, then the string will only consist of alpha-numeric characters.
Random.string :: (self: &Random, bytes_long: u32, alpha_numeric := false, allocator := context.allocator) -> str {
    use core.memory

    s := memory.make_slice(u8, bytes_long, allocator=allocator);
    for& s {
        if alpha_numeric {
            #persist alpha_numeral := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            *it = self->choice(alpha_numeral);
        } else {
            *it = ~~(self->between(32, 127));
        }
    }
    return s;
}

//
// Below are procedures that use a global random number
// generator for quick random number generation.
//


//
// The global random state.
global_random := Random.{ 8675309 };

/// Sets the seed for the global random number generator.
set_seed :: #match {
    (s: u32) { global_random->set_seed(~~s); },
    (s: u64) { global_random->set_seed(s); },
}

/// Generates a random integer.
int :: () =>
    global_random->int();

/// Generates a random integer, between `lo` and `hi` inclusively.
between :: (lo: i32, hi: i32) =>
    global_random->between(lo, hi);

/// Generates a random floating point number.
float :: (lo := 0.0f, hi := 1.0f) =>
    global_random->float(lo, hi);

/// Chooses a random element out of a slice.
choice :: (a: [] $T) =>
    global_random->choice(a);

/// Returns a random byte-array of length `bytes_long`.
///
/// If `alpha_numeric` is true, then the string will only consist of alpha-numeric characters.
string :: (bytes_long: u32, alpha_numeric := false, allocator := context.allocator) =>
    global_random->string(bytes_long, alpha_numeric, allocator);



//
// Internal implementation details
//

#package {
    RANDOM_MULTIPLIER :: 25214903917
    RANDOM_INCREMENT  :: cast(i64) 11

    #if #defined(runtime.platform.__random_get) {
        __initial_value :: [](do {
            v: u64;
            runtime.platform.__random_get(.{ ~~&v, sizeof typeof v });
            return v;
        })
    } else {
        #if #defined(core.os.time) {
            __initial_value :: [](core.os.time())
        } else {
            __initial_value :: [](8675309)
        }
    }
}

