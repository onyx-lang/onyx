package runtime.platform

use core {package, *}
use runtime
use runtime {
    __runtime_initialize,
    Multi_Threading_Enabled,
}

use main

// Platform supports
Supports_Time :: true
Supports_Futexes :: true
Supports_Type_Info :: true
Supports_Threads :: true

// The Onyx Playground needs to overload these because it does special things
// to make some of these work.
#if !#defined(runtime.vars.JS_PLATFORM_LAYER_EXTENSIONS) {
    Supports_Files :: false
    Supports_Directories :: false
    Supports_Os :: false
    Supports_Processes :: false
    Supports_Networking :: false
    Supports_Env_Vars :: false
    Supports_TTY :: false
}

__output_string   :: (s: str)      -> u32  #foreign "host" "print_str" ---
__output_error    :: (s: str)      -> u32  #foreign "host" "print_str" ---
__exit            :: (status: i32) -> void #foreign "host" "exit" ---
__time            :: ()            -> i64  #foreign "host" "time" ---

#if !#defined(__read_from_input) {
    __read_from_input :: (buf: [] u8)  -> u32 do return 0;
}

__wait_for_input :: (timeout: i32) => true;

__futex_wait :: (addr: rawptr, expected: i32, timeout: i32) -> i32 {
    use core.intrinsics.atomics {__atomic_wait}
    if context.thread_id != 0 {
        __atomic_wait(cast(&i32) addr, expected, ~~timeout);
        return 0;
    }
    return 1;
}

__futex_wake :: (addr: rawptr, maximum: i32) -> i32 {
    use core.intrinsics.atomics {__atomic_notify}
    __atomic_notify(addr, maximum);
    return 1;
}

PollDescription :: struct {
    fd: i32;
    input, out: io.PollEvent;
}
__poll :: (fds: [] PollDescription, timeout := -1) {}

// Sets up everything needed for execution.
__start :: () {
    __runtime_initialize();
    context.thread_id = 0;

    #if (typeof main.main) == #type () -> void {
        main.main();

    } else {
        args: [] cstr = .{ null, 0 };
        main.main(args);
    }

    __flush_stdio();
}

#if Multi_Threading_Enabled {
    __spawn_thread :: (id: i32, tls_base: rawptr, stack_base: rawptr, func: (data: rawptr) -> void, data: rawptr) -> bool #foreign "host" "spawn_thread" ---
    __kill_thread  :: (id: i32) -> i32 #foreign "host" "kill_thread" ---

    #export "_thread_start" runtime._thread_start
    #export "_thread_exit"  runtime._thread_exit
}
