package runtime.info

use runtime
use core {alloc} // These can included because this file is only included in non-custom runtimes.

//
// This file contains the code for working with runtime stack traces.
// The only function in this file is `get_stack_trace`, which returns
// an array of stack nodes, allocated from the threads temporary allocator.
// This is not the `context.temp_allocator`, because certain builtin in
// allocators use `get_stack_trace`, and can accidentally cause infinite
// recursion.
//

Stack_Node :: struct {
    file: str
    line: u32
    func_name: str
}

Stack_Trace :: struct {
    prev: &Stack_Trace
    data: &Stack_Node
    current_line: u32
}

Stack_Frame :: struct {
    info: &Stack_Node
    current_line: u32
}

#if runtime.Stack_Trace_Enabled {

get_stack_trace :: #match #local {}

#overload
get_stack_trace :: (offset := 0) -> [..] Stack_Frame {
    trace := make([..] Stack_Frame, 8, alloc.temp_allocator)

    walker := __stack_trace.prev

    for offset {
        if walker {
            walker = walker.prev
        }
    }

    while walker {
        trace << .{ walker.data, walker.current_line }
        walker = walker.prev
    }

    return trace
}

#overload
get_stack_trace :: (buf: [] Stack_Frame, offset := 0) -> [] Stack_Frame {
    walker := __stack_trace.prev

    for offset {
        if walker {
            walker = walker.prev
        }
    }

    i := 0
    while walker && i < buf.count {
        buf[i] = .{ walker.data, walker.current_line }
        walker = walker.prev
        i += 1
    }

    return buf[0 .. i]
}

} else {

get_stack_trace :: #match #local {}

#overload
get_stack_trace :: (offset := 0) -> [] Stack_Frame {
    return .[]
}

#overload
get_stack_trace :: (buf: [] Stack_Frame, offset := 0) -> [] Stack_Frame {
    return buf[0 .. 0]
}
    
}

