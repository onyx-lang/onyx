package runtime

use core {package, *}
use core.intrinsics.onyx { __initialize }
use runtime.platform { __output_string }

//
// Export the __start function from the platform layer.
// Every platform should define this, even if is it just '() {}'.
#export "_start" platform.__start

#if runtime != .Wasi {
    //
    // Export a common initialization procedure that should
    // always be invoked before using anything in Onyx.
    #export "_initialize" () {
        __runtime_initialize()
        context.thread_id = 0;    
    }
}

#local
__output_uint :: (n: u64) {
    buf: [128] u8
    i := 127
    while n > 0 && i >= 0 {
        buf[i] = ~~('0' + n % 10)
        i -= 1
        n /= 10
    }

    __output_string(buf[i .. 128])
}

// The default assert handler. This assumes that __output_string
// and __exit are defined in the 'runtime' package.
__assert_handler :: (msg: str, site: CallSite) {
    __output_string("Assert failed: ")
    __output_string(msg)


    #if Stack_Trace_Enabled {
        __output_string("\n")
        trace := info.get_stack_trace()
        for trace[1..trace.length] {
            __output_string(" in ")
            __output_string(it.info.func_name)
            __output_string(" (")
            __output_string(it.info.file)
            __output_string(":")
            __output_uint(~~it.current_line)
            __output_string(")\n")
        }

    } else {
        if site.file.data != null {
            __output_string(" in ")
            __output_string(site.file)
        }
    }

    __output_string("\n")

    core.intrinsics.wasm.unreachable()

    // This will never return
    return
}

// This procedure should only be called once at the very begining
// of the program. It initializes the data segments, the global heap
// allocator, as well as thread-local storage, the context, and stdio
// on the main thread. Finally it runs initialization procedures, which
// should only happen once.
__runtime_initialize :: () {
    __initialize_data_segments()

    alloc.heap.init()
    __thread_initialize()

    #if Multi_Threading_Enabled do thread.__initialize()

    __run_init_procedures()
}

// Use this procedure to initialize everything needed in the
// standard library when you are dropped directly into a function.
__thread_initialize :: () {
    use core.intrinsics.onyx { __initialize }

    // This should only be true for the main thread.
    if __tls_base == null {
        __tls_base = raw_alloc(alloc.heap_allocator, __tls_size)
        memory.set(__tls_base, 0, __tls_size)
    }

    alloc.init_temp_allocator()

    __initialize(&context)
    context.allocator = alloc.heap_allocator
    context.temp_allocator = alloc.temp_allocator
    context.assert_handler = __assert_handler

    //
    // The default log level is Info. This seems reasonable, but it does
    // mean that all Debug messages will be omitted unless it is changed
    // manually.
    default_log_level(.Info)

    __stdio_init()
}

#if Multi_Threading_Enabled {
    _thread_start :: (id: i32, tls_base: rawptr, stack_base: rawptr, func: (data: rawptr) -> void, data: rawptr) {
        __tls_base = tls_base
        __stack_top = stack_base

        context.thread_id = id

        __thread_initialize()

        func(data)

        __flush_stdio()

        core.thread.__exited(id)
    }

    _thread_exit :: (id: i32) {
        // raw_free(alloc.heap_allocator, __tls_base)
        // core.thread.__exited(id)
    }
}
