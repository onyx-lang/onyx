package builtin

use runtime

//
// Explanation of `package builtin`
//
// The package "builtin" is a special package, and this file is a special file.
// This file is automatically included in EVERY Onyx compilation. It contains
// many of the core data types and "magic" functions that Onyx needs to operate.
// There is no way to not include this file, so the number of things in here
// have, and should continue, to remain limited.
//
// "builtin" is a special package. Because many of these core data types are
// needed in every single Onyx file, it would be nice if they were always
// accessible. To make this possible, the *public* scope of the builtin package
// is actually the *global* scope, the scope above every package. The global
// scope is visible to every file. By mapping builtin's public scope to the
// global scope, everything in this file can be accessed without needing to
// 'use' or prefix anything.
//





//
// The builtin string and C-string types.
// A string is simply a slice of bytes, and a c-string is a pointer
// to byte, with a null-terminator ('\0') at the end.
str     :: #type   [] u8;
cstr    :: #type  [&] u8;
dyn_str :: #type [..] u8;




//
// This is the type of a range literal (i.e. 1 .. 5).
// This is a special type that the compiler knows how to iterator through.
// So, one can simply write:
//
//      for x in 1 .. 5 { ... }
//
// Although not controllable from the literal syntax, there is a `step`
// member that allows you control how many numbers to advance each iteration.
// For example, range.{ 0, 100, 2 } would iterate over the even numbers, and
// range.{ 100, 0, -1 } would count backwards from 100 to 0 (and including 0).
range :: struct {
    low  : i32;
    high : i32;
    step : i32 = 1;
}

//
// To have parity between range32 and range64
range32 :: range


//
// This is the same as the `range` type, except with 64-bit integers.
range64 :: struct {
    low  : i64;
    high : i64;
    step : i64 = 1;
}




//
// `null` in Onyx is simply the address 0, as a rawptr, so it implicitly
// casts to all other pointer types.
null :: cast(rawptr) 0

#doc """
    `null_proc` is a special function that breaks the normal rules of type
    checking. `null_proc`, or any procedure marked with `#null`, is assignable
    to any function type, regardless of if the types match. For example,

        f: (i32) -> i32 = null_proc;

    Even though `null_proc` is a `() -> void` function, it bypasses that check
    and gets assigned to `f`. If f is called, there will be a runtime exception.
    This is by design.
"""
null_proc :: () -> void #null ---

//
// I find myself wanting to return a completely nullified string like the
// one below that I decided to added a builtin binding for it. This might
// go away at some point and would just need to be defined in every file.
null_str  :: str.{ null, 0 }



//
// The 'context' is used to store thread-local configuration for things like
// allocators, loggers, exception handles, and other things. It is thread
// local so every threads gets its own copy.
#thread_local context : OnyxContext;

//
// This is the type of the 'context' global variable.
OnyxContext :: struct {
    // The allocator used by default by the standard library. It is by
    // default the global heap allocator.
    allocator      : Allocator;

    // The allocator used for all "temporary" things. By default, the
    // temp_allocator is a thread-local arena allocator, that has to
    // be manually reset using `alloc.clear_temp_allocator()`. What
    // is "temporary" is up to your program; you can clear the
    // temporary allocator when you see fit. Generally this is at the
    // start of the main loop of your program.
    temp_allocator : Allocator;

    // The procedure to call when allocating space for a closure.
    // The default is to allocate using the `temp_allocator`.
    closure_allocate: (size: i32) -> rawptr = default_closure_allocate;

    // Defines what happens when `log()` is called. Defaults to a
    // logger that filters log messages by their severity.
    logger         : Logger = .{ default_logger_proc, &default_logger };

    // Defines what happens when an `assert()` check fails. Defaults
    // to printing the error and running an unreachable instruction,
    // causing a fault.
    assert_handler : (msg: str, site: CallSite) -> void;

    // The thread_id of the current thread. The main thread is
    // 0, and subsequent threads are given incremental ids.
    thread_id      : i32;

    // Allows you to place any data on the context that you want to.
    user_data: rawptr;
    user_data_type: type_expr;
}

//
// Define helper methods for setting and retrieving the user_data
// stored on the context.
OnyxContext.set_user_data :: macro (c: &OnyxContext, data: &$T) {
    c.user_data = data;
    c.user_data_type = T;
}

OnyxContext.get_user_data :: macro (c: &OnyxContext, $T: type_expr) -> &T {
    if c.user_data_type != T do return null;
    return ~~ c.user_data;
}



// CLEANUP: Does assert() need to be in the builtin file?
// It uses context.assert_handler, but does it needt to be here?
//
// Checks if the condition is true. If not, invoke the context's
// assert handler.
assert :: (cond: bool, msg: str, site := #callsite) {
    if !cond {
        context.assert_handler(msg, site);
    }
}


//
// Basic logging
//

Log_Level :: enum {
    Debug;
    Info;
    Warning;
    Error;
    Critical;
}

Logger :: struct {
    func : (data: rawptr, level: Log_Level, msg: str, module: str) -> void;
    data : rawptr;
}

log :: #match #local {}

#overload
log :: (level: Log_Level, msg: str) {
    context.logger.func(context.logger.data, level, msg, "");
}

#overload
log :: (level: Log_Level, module, msg: str) {
    context.logger.func(context.logger.data, level, msg, module);
}



//
// A sensible default logger.
//
Default_Logger :: struct {
    minimum_level: Log_Level;

    log :: default_logger_proc;
}

#local #thread_local default_logger: Default_Logger;

default_log_level :: (level: Log_Level) {
    default_logger.minimum_level = level;
}

#if runtime.runtime != .Custom {
    #local default_logger_proc :: (logger: &Default_Logger, level: Log_Level, msg: str, module: str) {
        use core;

        if level < logger.minimum_level do return;

        if module {
            core.printf("[{}][{}] {}\n", level, module, msg);
        } else {
            core.printf("[{}] {}\n", level, msg);
        }
    }

} else {
    #local default_logger_proc :: (data: rawptr, level: Log_Level, msg: str, module: str) {
        // In a custom runtime, there is no way to know how to log something.
    }
}


#local default_closure_allocate :: (size: i32) -> rawptr {
    return raw_alloc(context.temp_allocator, size);
}



//
// Basic allocation structures.
// The implementations of all of the allocators can be found in core/alloc/.
// These need to be here so the context structure has the types and enum values.
//

Allocator :: struct {
    data: rawptr;
    func: (data: rawptr, action: AllocationAction, size: u32, align: u32, old_ptr: rawptr) -> rawptr;
}

AllocationAction :: enum {
    Alloc;
    Free;
    Resize;
}

#local
Default_Allocation_Alignment :: 16

//
// Helper procedure to allocate out of an allocator.
raw_alloc :: (use a: Allocator, size: u32, alignment := Default_Allocation_Alignment) -> rawptr {
    return func(data, AllocationAction.Alloc, size, alignment, null);
}

//
// Helper procedure to resize an allocation from an allocator.
raw_resize :: (use a: Allocator, ptr: rawptr, size: u32, alignment := Default_Allocation_Alignment) -> rawptr {
    return func(data, AllocationAction.Resize, size, alignment, ptr);
}

//
// Helper procedure to free an allocation from an allocator.
raw_free :: (use a: Allocator, ptr: rawptr) {
    func(data, AllocationAction.Free, 0, 0, ptr);
}

Allocator.alloc :: raw_alloc
Allocator.resize :: raw_resize
Allocator.free :: raw_free

Allocator.move :: macro (use a: Allocator, v: $V) -> &V {
    out := cast(&V) a->alloc(sizeof V);
    *out = v;
    return out;
}

//
// Helper function to allocate/free using allocator in the context structure.
calloc  :: (size: u32)              => raw_alloc(context.allocator, size);
cresize :: (ptr: rawptr, size: u32) => raw_resize(context.allocator, ptr, size);
cfree   :: (ptr: rawptr)            => raw_free(context.allocator, ptr);


//
// This cannot be used in a custom runtime, as the other core
// packages are not included.
#if runtime.runtime != .Custom {
    use core
    use core.memory

    new :: #match #local {}

    #overload
    new :: ($T: type_expr, allocator := context.allocator) -> &T {
        use core.intrinsics.onyx { __initialize }

        res := cast(&T) raw_alloc(allocator, sizeof T);
        memory.set(res, 0, sizeof T);
        __initialize(res);

        return res;
    }

    #overload
    new :: (T: type_expr, allocator := context.allocator) -> rawptr {
        type_info :: runtime.info

        info := type_info.get_type_info(T);
        size := type_info.size_of(T);
        if size == 0 do return null;

        res := raw_alloc(allocator, size);
        memory.set(res, 0, size);

        if info.kind == .Struct {
            s_info := cast(&type_info.Type_Info_Struct) info;
            for s_info.members {
                if it.default != null {
                    member_size := type_info.size_of(it.type);
                    memory.copy(cast([&] u8) res + it.offset, it.default, member_size);
                }
            }
        }

        return res;
    }

    new_temp :: macro (T: type_expr) => {
        return new(T, allocator=context.temp_allocator);
    }

    make :: #match #local {}

    #overload
    make :: macro ($T: type_expr, allocator := context.allocator) => {
        return __make_overload(cast(&T) null, allocator=allocator);
    }

    #overload
    make :: macro ($T: type_expr, n: u32, allocator := context.allocator) => {
        return __make_overload(cast(&T) null, n, allocator=allocator);
    }

    make_temp :: #match #local {}

    #overload
    make_temp :: macro (T: type_expr) => {
        return make(T, allocator=context.temp_allocator);
    }

    #overload
    make_temp :: macro (T: type_expr, n: u32) => {
        return make(T, n, allocator=context.temp_allocator);
    }

    //
    // This is a rather unique way of using the type matching system
    // to select an overload. What is desired here is that when you say:
    //
    //    make(Foo)
    //
    // You match the overload for make that is designed for making a Foo.
    // However, you cannot use the type matching system to match by value.
    // In order to get around this, `make` will pass a null pointer to this
    // match procedure, that is casted to be a *pointer* to the desired type.
    // Therefore, if you want to add your own make overload, you have to add
    // a match to `__make_overload` that takes a *pointer* to the desired
    // type as the first argument, and then an allocator as the second.
    // Optionally, you can take a parameter between them that is an integer,
    // useful when constructing things like arrays.
    //
    // See core/container/array.onyx for an example.
    //
    __make_overload :: #match {}

    delete :: #match {}

    #local
    Destroyable :: interface (T: type_expr) {
        t as T;

        { T.destroy(&t) } -> void;
    }

    #overload #order 1000
    delete :: macro (x: &$T/Destroyable) {
        x_ := x;
        T.destroy(x_);
        cfree(x_);
    }
}


#doc """
   Represents a generic "iterator" or "generator" of a specific
   type. Can be used in a for-loop natively.

   `data` is used for contextual information and is passed to
   the `next`, `close`, and `remove` procedures.

   `next` is used to extract the next value out of the iterator.
   It returns the next value, and a continuation flag. If the
   flag is false, the value should be ignored and iteration should
   stop.

   `close` should called when the iterator has ended. This is
   done automatically in for-loops, and in the `core.iter` library.
   In for-loops, `close` is called no matter which way the for-loop
   exits (`break`, `return`, etc). Using this rule, iterator can
   be used to create "resources" that automatically close when you
   are done with them.

   `remove` is used to tell the iterator to remove the last value
   returned from some underlying data store. Invoked automatically
   using the `#remove` directive in a for-loop.
"""
Iterator :: struct (Iter_Type: type_expr) {
    data:   rawptr;
    next:   (data: rawptr) -> (Iter_Type, bool);
    close:  (data: rawptr) -> void = null_proc;
    remove: (data: rawptr) -> void = null_proc;
}


#doc """
    Optional represents the possibility of a value being empty, without
    resorting to pointers and null-pointers. Most of the functionality
    for Optional is defined in core/containers/optional.onyx. This
    definition exists here because the compiler use it as the template
    for types like '? i32'. In other words, '? i32' is equivalent to
    'Optional(i32)'.
"""
Optional :: union (Value_Type: type_expr) {
    None: void;
    Some: Value_Type;
}


#doc """
    This structure represents the slice types, `[] T`.
    While slices are a special type in Onyx, and therefore need extra
    compiler support, this structure exists to allow for placing
    methods onto slices. See `core/container/slice.onyx` for examples.
"""
Slice :: struct (T: type_expr) {
    data: [&] T;
    count: i32;
}


#doc """
    This structure represents the dynamic array types, `[..] T`.
    This structure exists to allow for placing methods onto dynamic arrays.
    See `core/container/array.onyx` for examples.
"""
Array :: struct (T: type_expr) {
    data: [&] T;
    count: i32;
    capacity: i32;
    allocator: Allocator;
}


#doc """
    This structure represents the result of a '#callsite' expression. Currently, #callsite
    is only valid (and parsed) as a default value for a procedure parameter. It allows
    the function to get the address of the calling site, which can be used for error
    printing, unique hashes, and much more.
"""
CallSite :: struct {
    file   : str;
    line   : u32;
    column : u32;
}


#doc """
    This structure is used to represent any value in the language.
    It contains a pointer to the data, and the type of the value.
    Using the `core.misc` library, you can easily manipulate `any`s
    and build runtime polymorphism.
"""
any :: struct {
    data: rawptr;
    type: type_expr;
}

#doc """
    Represents a code block that can be passed around at compile-time.
    This is commonly used with macros or polymorphic procedures to create
    very power extensions to the syntax.
"""
Code :: struct {_:i32;}



#doc """
    This procedure is a special compiler generated procedure that initializes all the data segments
    in the program. It should only be called once, by the main thread, at the start of execution. It
    is undefined behaviour if it is called more than once.
"""
__initialize_data_segments :: () -> void ---

#doc """
    This is a special compiler generated procedure that calls all procedures specified with `#init`
    in the specified order. It should theoretically only be called once on the main thread.
"""
__run_init_procedures :: () -> void ---

#doc """
    This overloaded procedure allows you to define an implicit rule for how to convert any value
    into a boolean. A default is provided for ALL pointer types and array types, but this can
    be used for structures or distinct types.
"""
__implicit_bool_cast :: #match -> bool {}

#doc """
    Internal procedure to allocate space for the captures in a closure. This will be soon
    changed to a configurable way, but for now it simply allocates out of the heap allocator.
"""
__closure_block_allocate :: (size: i32) -> rawptr {
    return context.closure_allocate(size);
}


#doc """
"""
__dispose_used_local :: #match -> void {
    #order 10000 delete
}


#doc """
    Defines all options for changing the memory layout, imports and exports,
    and more of an Onyx binary.
"""
Link_Options :: struct {
    // By default the memory layout of a binary is:
    //   reserved | static-data | stack | heap
    // But when stack_first is true, it is:
    //   reserved | stack | static-data | heap
    stack_first     := false;

    // The size, in bytes of the stack.
    stack_size      := 16 * 65536;  // 16 pages * 65536 bytes per page = 1 MiB stack

    // The alignment of the start addres of the stack.
    stack_alignment := 16;

    // How large the reserved section at the start
    // of memory should be. Because `null` is a valid
    // address in WASM, it makes sense to reserve some
    // memory at the beginning of the binary so `null`
    // always points to nothing.
    null_reserve_size := 16;

    // Controls if/how the WASM memory will be imported.
    import_memory := IMPORT_MEMORY_DEFAULT;
    import_memory_module_name := IMPORT_MEMORY_MODULE_NAME_DEFAULT;
    import_memory_import_name := IMPORT_MEMORY_IMPORT_NAME_DEFAULT;

    // Controls if/how the WASM memory will be exported.
    export_memory := true;
    export_memory_name := "memory";

    // Controls if/how the WASM function table will be exported.
    export_func_table := true;
    export_func_table_name := "__indirect_function_table";

    // Controls the minimum and maximum number of pages for WASM memory.
    memory_min_size := 1024;
    memory_max_size := 65536;
}

// Define settings for the link options depending on the runtime.
#local {
    #if runtime.runtime == .Onyx || (runtime.runtime == .Js && runtime.Multi_Threading_Enabled) {
        IMPORT_MEMORY_DEFAULT :: true;
        IMPORT_MEMORY_MODULE_NAME_DEFAULT :: "onyx";
        IMPORT_MEMORY_IMPORT_NAME_DEFAULT :: "memory";
    } else {
        #if runtime.runtime == .Wasi && runtime.Multi_Threading_Enabled {
            IMPORT_MEMORY_DEFAULT :: true;
            IMPORT_MEMORY_MODULE_NAME_DEFAULT :: "env";
            IMPORT_MEMORY_IMPORT_NAME_DEFAULT :: "memory";
        } else {
            IMPORT_MEMORY_DEFAULT :: false;
            IMPORT_MEMORY_MODULE_NAME_DEFAULT :: "";
            IMPORT_MEMORY_IMPORT_NAME_DEFAULT :: "";
        }
    }
}


#doc """
    Special type used to represent a package at runtime.
    For example,

        x: package_id = package main

    Currently, there is not much you can do with this; it is
    only used by the runtime.info library if you want to filter
    tags based on which package they are coming from.
"""
package_id :: #distinct u32

//
// Special value used to represents any package.
any_package :: cast(package_id) 0

//
// Load builtin operator overloads.
#load "./operations.onyx"

//
// DEPRECATED THINGS
//

//
// This is the special type of a paramter that was declared to have the type '...'.
// This is an old feature of the language now called  'untyped varargs'. It had
// a similar construction to varargs in C/C++. Because it is incredibly unsafe
// and not programmer friendly, this way of doing it has been deprecated in
// favor of  using '..any', which provides type information along with the data.
vararg :: #type &struct {
    data:  rawptr;
    count: i32;
}
