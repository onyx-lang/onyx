package core.encoding.csv
#allow_stale_code

//
// A simple CSV parsing and encoding library.
// 
// This library is used to ingest and output a CSV file. It uses
// a polymorphic structure to represent a CSV over a particular
// set of data. This helps with type safety, as well as making
// it ergonomic to work with.
//

use core
use core.string
use core.array
use core.iter
use core.conv
use core.io
use core.test
use runtime

use core.misc {any_as}
use runtime.info {
    get_type_info,
    Type_Info_Struct
}

/// Represents data from a CSV file of a particular type.
CSV :: struct (Output_Type: type_expr) {
    entries: [..] Output_Type;
}

/// Tag-type used to tell the ingress and egress methods what
/// the column name of a particular data element should be.
///
///     Data :: struct {
///         @CSV_Column.{"Actual Column Name"}
///         variable_name: str;
///     }
CSV_Column :: struct {
    name: str;
}

/// Create and initialize a CSV with no elements.
CSV.make :: ($T: type_expr) => {
    r := CSV(T).{};
    r.entries = make(typeof r.entries);

    return r;
}

/// Frees all data in a CSV.
CSV.delete :: (csv: &CSV) {
    delete(&csv.entries);
}

/// Ingests data from a string representing CSV data.
/// Uses the type of the CSV to know what columns should be expected.
/// If `headers_presents` is true, the first line will be treated as
/// headers, and cross checked with the CSV_Column tag information.
/// Use this when the columns from your CSV have a different order
/// from the order of fields in the structure.
CSV.ingress_string :: (csv: &CSV, contents: str, headers_present := true) -> bool {
    reader, stream := io.reader_from_string(contents);
    defer cfree(stream);

    return csv->ingress(&reader, headers_present);
}

/// Ingests data from a Reader containing CSV data.
/// Uses the type of the CSV to know what columns should be expectd.
CSV.ingress :: (csv: &CSV, reader: &io.Reader, headers_present := true) -> bool {
    Header :: struct {
        type: type_expr;
        offset: i32;
    }

    any_headers := make([..] Header);
    defer delete(&any_headers);

    output_type_info: &Type_Info_Struct = ~~ get_type_info(csv.Output_Type);

    if headers_present {
        header_line := reader->read_line(allocator=context.temp_allocator)
                    |> string.strip_trailing_whitespace();

        for header in string.split_iter(header_line, #char ",") {
            member := array.first(output_type_info.members, [](do {
                if tag := array.first(it.tags, [t](t.type == CSV_Column)); tag {
                    return any_as(*tag, CSV_Column).name == header;
                }

                return false;
            }));

            any_headers << ((.{member.type, member.offset}) if member else .{void, -1});
        }

    } else {
        for &member in output_type_info.members {
            any_headers << .{ member.type, member.offset };
        }
    }

    for line in reader->lines(allocator = context.temp_allocator) {
        out: csv.Output_Type;

        for entry in string.split_iter(string.strip_trailing_whitespace(line), #char ",")
                |> iter.enumerate()
        {
            header := &any_headers[entry.index];
            if header.offset == -1 do continue;

            target := cast([&] u8) &out + header.offset;

            if header.type == str {
                *cast(&str) target = string.copy(entry.value);
            } else {
                conv.parse_any(target, header.type, entry.value);
            }
        }

        csv.entries << out;
    }

    return true;
}

/// Outputs data from a CSV into a Writer.
/// When `include_headers` is true, the first line outputted will be
/// the headers of the CSV, according to the CSV_Column tag information.
CSV.egress :: (csv: &CSV, writer: &io.Writer, include_headers := true) {
    output_type_info: &Type_Info_Struct = ~~ get_type_info(csv.Output_Type);

    if include_headers {
        for &member in output_type_info.members {
            if !#first do io.write(writer, ",");

            if tag := array.first(member.tags, [t](t.type == CSV_Column)); tag {
                io.write(writer, any_as(*tag, CSV_Column).name);
            } else {
                io.write(writer, member.name);
            }
        }

        io.write(writer, "\n");
    }

    for &it in csv.entries {
        for &member in output_type_info.members {
            if !#first do io.write(writer, ",");

            io.write_format_va(writer, "{}", .[ .{cast([&] u8) it + member.offset, member.type} ]);
        }

        io.write(writer, "\n");
    }
}


//
// Example and test case
//

@test.test.{"CSV Test"}
(t: &test.T) {
    data := """first,second,third
1,test 1,1.2
2,test 2,2.4
3,test 3,3.6""";

    Data :: struct {
        @CSV_Column.{"first"}
        first: i32;

        @CSV_Column.{"second"}
        second: str;

        @CSV_Column.{"third"}
        third: f32;
    }

    csv: CSV(Data);
    csv->ingress_string(data);

    t->assert(csv.entries[0].first == 1,   "First entry matches");
    t->assert(csv.entries[2].third == 3.6, "Last entry matches");
}

