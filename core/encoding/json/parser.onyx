package core.encoding.json
#allow_stale_code

use core {*}

#package
Parser :: struct {
    tokenizer : Tokenizer;
    allocator : Allocator;

    current_token  : Token;
    previous_token : Token;
}

#package
make_parser :: (data: [] u8, allocator := context.allocator) -> Parser {
    parser: Parser;
    parser.tokenizer = Tokenizer.{ data = data };
    parser.allocator = allocator;
    consume_token(^parser);
    return parser;
}

#package
parse :: (data: [] u8, allocator := context.allocator) -> (Value, Error) {
    parser := make_parser(data, allocator);
    return parse_value(^parser);
}

#local
consume_token :: (use parser: ^Parser) -> (Token, Error) {
    error: Error;
    previous_token = current_token;
    current_token, error = token_get(^tokenizer);
    return previous_token, error;
}

#local
consume_token_if_next :: (use parser: ^Parser, kind: Token.Kind) -> bool {
    if current_token.kind == kind {
        consume_token(parser);
        return true;
    }

    return false;
}

#local
expect_token :: (use parser: ^Parser, kind: Token.Kind) -> (Token, Error) {
    previous :=  current_token;
    consume_token(parser);
    error := Error.{ .None, previous.position };
    if previous.kind != kind do error.kind = .Unexpected_Token;
    return previous, error;
}

#package
parse_value :: (use parser: ^Parser) -> (Value, Error) {
    return_value: ^_Value = null;

    current := current_token;
    switch current.kind {
        case .Null {
            value := new(_Value, allocator);

            consume_token(parser);
            return_value = value;
        }

        case .False, .True {
            value := new(_Value_Bool, allocator);
            value.bool_ = current.kind == .True;

            consume_token(parser);
            return_value = value;
        }

        case .Integer {
            value := new(_Value_Integer, allocator);
            value.int_ = conv.str_to_i64(current.text);

            consume_token(parser);
            return_value = value;
        }

        case .Float {
            value := new(_Value_Float, allocator);
            value.float_ = conv.str_to_f64(current.text);

            consume_token(parser);
            return_value = value;
        }

        case .String {
            value := new(_Value_String, allocator);
            value.str_ = unescape_string(current, allocator);

            consume_token(parser);
            return_value = value;
        }

        case .Open_Bracket {
            value, err := parse_array(parser);
            if err.kind != .None do return value, err;

            return_value = cast(^_Value) value;
        }

        case .Open_Brace {
            value, err := parse_object(parser);
            if err.kind != .None do return value, err;

            return_value = cast(^_Value) value;
        }

        case #default {
            consume_token(parser);
            return Value.{return_value}, .{ .Unexpected_Token, current.position };
        }
    }

    return Value.{return_value}, .{ .None };
}

#local
parse_array :: (use parser: ^Parser) -> (Value, Error) {
    value := new(_Value_Array, allocator);

    _, err := expect_token(parser, .Open_Bracket);
    if err.kind != .None do return Value.{value}, err;

    // This uses the context allocators because the array resizing needs to happen in a general purpose heap allocator
    arr := array.make(Value, allocator=context.allocator);
    defer if err.kind != .None {
        for elem in arr {
            free(elem, allocator);
        }

        array.free(^arr);
    }

    while current_token.kind != .Close_Bracket {
        elem, elem_err := parse_value(parser);
        if elem_err.kind != .None {
            err = elem_err;
            return Value.{value}, err;
        }

        array.push(^arr, elem);

        if !consume_token_if_next(parser, .Comma) {
            break;
        }
    }

    _, close_err := expect_token(parser, .Close_Bracket);
    if close_err.kind != .None {
        err = close_err;
        return Value.{value}, err;
    }

    value.array_ = arr;
    return Value.{value}, err;
}


#local
parse_object :: (use parser: ^Parser) -> (Value, Error) {
    value := new(_Value_Object, allocator);

    _, err := expect_token(parser, .Open_Brace);
    if err.kind != .None do return Value.{value}, err;

    // This uses the context allocators because the array resizing needs to happen in a general purpose heap allocator
    array.init(^value.object_, allocator=context.allocator);
    defer if err.kind != .None {
        free(Value.{value}, allocator);
    }

    while current_token.kind != .Close_Brace {
        key_token, key_err := expect_token(parser, .String);
        if key_err.kind != .None {
            err = key_err;
            return Value.{value}, err;
        }

        key := unescape_string(key_token, allocator);

        _, colon_err := expect_token(parser, .Colon);
        if colon_err.kind != .None {
            err = colon_err;
            return Value.{value}, err;
        }

        elem, elem_err := parse_value(parser);
        if elem_err.kind != .None {
            err = elem_err;
            return Value.{value}, err;
        }

        // Checking for duplicate keys. I have it disabled for the moment.
        #if false {
            for elem in value.object_ {
                if elem.key == key {
                    err.kind = .Duplicate_Keys;
                    err.pos  = key_token.pos;
                    string.free(key, allocator);
                    return Value.{value}, err;
                }
            }
        }

        array.push(^value.object_, .{
            key = key,
            value = elem
        });

        if !consume_token_if_next(parser, .Comma) {
            break;
        }
    }

    _, close_err := expect_token(parser, .Close_Brace);
    if close_err.kind != .None {
        err = close_err;
        return Value.{value}, err;
    }

    return Value.{value}, err;
}


#local
unescape_string :: (token: Token, allocator: Allocator) -> str {
    if token.kind != .String do return "";

    s := token.text;
    if s.count <= 2 do return "";

    s = s.data[1 .. s.count - 1];

    i := 0;
    for c in s {
        if c == #char "\\" || c == #char "\"" || c < #char " " {
            break;
        }

        i += 1;
    }

    if i == s.count {
        return string.copy(s, allocator);
    }

    buffer := memory.make_slice(u8, s.count, allocator=allocator);
    string.copy_into(s.data[0 .. i], buffer);
    buffer_write := i;

    while i < s.count {
        c := s[i];

        switch c {
            case #char "\\" {
                i += 1;
                if i >= s.count do break break;

                switch s[i] {
                    case #char "\"", #char "\\",  #char "/" {
                        buffer[buffer_write] = s[i];
                        i += 1;
                        buffer_write += 1;
                    }

                    case #char "n" {
                        buffer[buffer_write] = #char "\n";
                        i += 1;
                        buffer_write += 1;
                    }

                    case #char "t" {
                        buffer[buffer_write] = #char "\t";
                        i += 1;
                        buffer_write += 1;
                    }

                    case #char "r" {
                        buffer[buffer_write] = #char "\r";
                        i += 1;
                        buffer_write += 1;
                    }

                    case #char "b" {
                        buffer[buffer_write] = #char "\b";
                        i += 1;
                        buffer_write += 1;
                    }

                    case #char "f" {
                        buffer[buffer_write] = #char "\f";
                        i += 1;
                        buffer_write += 1;
                    }

                    case #char "v" {
                        buffer[buffer_write] = #char "\v";
                        i += 1;
                        buffer_write += 1;
                    }

                    case #char "u" {
                        i += 1;
                        wrote, consumed := parse_and_write_utf8_character(s[i..s.length], ~~&buffer[buffer_write]);
                        buffer_write += wrote;
                        i += consumed;
                    }
                }
            }

            case #default {
                buffer[buffer_write] = c;
                i += 1;
                buffer_write += 1;
            }
        }
    }

    buffer.count = buffer_write;
    return buffer;
}

#local
parse_and_write_utf8_character :: (s: str, out: [&] u8) -> (i32, i32) {
    if s.length < 4 do return 0, 0;

    chars := 0;
    codepoint: u32 = 0;

    for c in s[0 .. 4] {
        codepoint = codepoint << 4;
        codepoint |= digit_to_hex(c);
    }

    if codepoint <= 0x7F {
        out[0] = ~~ codepoint;
        return 1, 4;
    }

    if codepoint <= 0x7FF {
        out[0] = ~~(0xC0 | ((codepoint >> 6) & 0x1F));
        out[1] = ~~(0x80 | (codepoint & 0x3F));
        return 2, 4;
    }

    if codepoint <= 0x7FFF {
        out[0] = ~~(0xE0 | ((codepoint >> 12) & 0x0F));
        out[1] = ~~(0x80 | ((codepoint >> 6) & 0x3F));
        out[2] = ~~(0x80 | (codepoint & 0x3F));
        return 3, 4;
    }

    if codepoint < 0xD800 || codepoint > 0xDFFF {
        out[0] = ~~(0xF0 | ((codepoint >> 18) & 0x07));
        out[1] = ~~(0x80 | ((codepoint >> 12) & 0x3F));
        out[2] = ~~(0x80 | ((codepoint >> 6) & 0x3F));
        out[3] = ~~(0x80 | (codepoint & 0x3F));
        return 4, 4;
    }

    //
    // If the code point is between D800 and DFFF, then it
    // lies in the "surrogate zone" of the UTF spec, where
    // there are no valid codepoints, and the entire space
    // is reserved for surrogate pairs in UTF-16 space.
    //
    // When that is the case, we need to parse another 6 bytes,
    // for the \uXXXX, and use that to build a second codepoint
    // for the other surrogate pair. Then we stitch them
    // together using this formula:
    //
    //     actual = (first - 0xD800) << 10 + (second - 0xDC00) + 0x10000;
    //
    if s.length < 10 do return 0, 0;

    second_codepoint: u32 = 0;
    if s[4 .. 6] != "\\u" do return 0, 0;

    for c in s[6 .. 10] {
        second_codepoint = second_codepoint << 4;
        second_codepoint |= digit_to_hex(c);
    }

    codepoint        -= 0xD800;
    second_codepoint -= 0xDC00;

    codepoint = (codepoint << 10) + second_codepoint + 0x10000;

    if codepoint <= 0x10FFFF {
        out[0] = ~~(0xF0 | ((codepoint >> 18) & 0x07));
        out[1] = ~~(0x80 | ((codepoint >> 12) & 0x3F));
        out[2] = ~~(0x80 | ((codepoint >> 6) & 0x3F));
        out[3] = ~~(0x80 | (codepoint & 0x3F));
        return 4, 10;
    }

    return 0, 0;

    digit_to_hex :: (c: u8) -> i32 {
        return switch c {
            case '0' => 0;
            case '1' => 1;
            case '2' => 2;
            case '3' => 3;
            case '4' => 4;
            case '5' => 5;
            case '6' => 6;
            case '7' => 7;
            case '8' => 8;
            case '9' => 9;
            case 'A', 'a' => 10;
            case 'B', 'b' => 11;
            case 'C', 'c' => 12;
            case 'D', 'd' => 13;
            case 'E', 'e' => 14;
            case 'F', 'f' => 15;
        };
    }
}
