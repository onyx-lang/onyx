package core.encoding.hex

encode :: (s: str, allocator := context.allocator) -> str {
    #persist encode_map := u8.['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']

    new_str := make([] u8, s.count * 2, allocator)
    for i in s.count {
        new_str[2 * i + 0] = encode_map[(s[i] & 0xf0) >> 4]
        new_str[2 * i + 1] = encode_map[s[i] & 0xf]
    }

    return new_str
}

decode :: (s: str, allocator := context.allocator) -> str {
    assert(s.count & 1 == 0, "Expected string of even length")

    new_str := make([] u8, s.count >> 1, allocator)
    for i in range.{0, s.count, 2} {
        new_str[i >> 1] = ~~((digit_to_value(s[i + 0]) << 4) | (digit_to_value(s[i + 1])))
    }
    
    return new_str

    digit_to_value :: (it: u8) -> u32 {
        return ~~ switch it {
            case '0' ..= '9' => it - '0'
            case 'a' ..= 'f' => it - 'a' + 10
            case 'A' ..= 'F' => it - 'A' + 10
            case _ => 0
        }
    }
}
