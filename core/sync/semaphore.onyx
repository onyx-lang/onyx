package core.sync

use runtime
use core

/// A semaphore represents a counter that can only be incremented
/// and decremented by one thread at a time. "Waiting" on a semaphore
/// means decrementing the counter by 1 if it is greater than 0, otherwise
/// waiting until the counter is incremented. "Posting" on a semaphore
/// means incrementing the counter by a certain value, in turn releasing
/// other threads that might have been waiting for the value to change.
///
/// Semaphores are generally used for controlling access to shared
/// resources. For a contrived example, say only 4 threads can use
/// a given network connection at a time. A semaphore would be created
/// with a value of 4. When a thread wants to use the network connection,
/// it would use `semaphore_wait` to obtain the resource, or wait if
/// the network is currently available. When it is done using the
/// network, it would call `semaphore_post` to release the resource,
/// allowing another thread to use it.
Semaphore :: struct {
    mutex   : Mutex;
    counter : i32;
}

/// Initializes a semaphore with the specified value.
semaphore_init :: (s: &Semaphore, value: i32) {
    s.counter = value;

    mutex_init(&s.mutex);
}


/// Destroys a semaphore.
semaphore_destroy :: (s: &Semaphore) {
    mutex_destroy(&s.mutex);
}


/// Increment the counter in a semaphore by `count`.
semaphore_post :: (s: &Semaphore, count := 1) {
    if count == 0 do return;
    
    scoped_mutex(&s.mutex);
    s.counter += count;

    // @Bug
    // This is susceptible to starvation. Semaphores should have a queue
    // or something like that.
    #if runtime.platform.Supports_Futexes {
        runtime.platform.__futex_wake(&s.counter, count);
    }
}

/// Waits until the thread is able to decrement one from the semaphore.
semaphore_wait :: (s: &Semaphore) {
    while true {
        mutex_lock(&s.mutex);
        if s.counter > 0 {
            s.counter -= 1;

            mutex_unlock(&s.mutex);
            return;

        } else {
            mutex_unlock(&s.mutex);

            #if runtime.platform.Supports_Futexes {
                runtime.platform.__futex_wait(&s.counter, 0, -1);
            }
        }
    }
}
