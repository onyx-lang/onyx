package core.sync

//
// A barrier is a special case of a condition variable that
// creates a special point in the code where all threads have
// to "sync up", before any thread can continue. Barriers
// are generally used between steps of parallel processing
// to ensure every thread is where it needs to be.
//
// All threads simply call barrier_wait to signal that they
// have reached that point in the code. The last thread to
// call barrier_wait will wake up every other thread and
// continue processing.
//

/// Represents a generational barrier, so the same barrier
/// can be used safely multiple times.
Barrier :: struct {
    mutex : Mutex;
    cond  : Condition_Variable;

    index        : i32;
    generation   : i32;
    thread_count : i32;
}


/// Initializes a new generational barrier with `thread_count` threads.
barrier_init :: (b: &Barrier, thread_count: i32) {
    mutex_init(&b.mutex);
    condition_init(&b.cond);

    b.index = 0;
    b.generation = 0;
    b.thread_count = thread_count;
}


/// Destroys a generational barrier.
barrier_destroy :: (b: &Barrier) {
    mutex_destroy(&b.mutex);
    condition_destroy(&b.cond);
}

/// Signals that a thread has reached the barrier.
/// The last thread to reach the barrier will wake up all other threads.
barrier_wait :: (b: &Barrier) {
    mutex_lock(&b.mutex);
    defer mutex_unlock(&b.mutex);

    local_gen := b.generation;
    b.index += 1;

    if b.index < b.thread_count {
        while local_gen == b.generation && b.index < b.thread_count {
            condition_wait(&b.cond, &b.mutex);
        }
        return;
    }

    b.index = 0;
    b.generation += 1;
    condition_broadcast(&b.cond);
    return;
}
