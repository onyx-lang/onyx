package core.conv

#if !#defined(Enable_Custom_Formatters) {
    Enable_Custom_Formatters :: true
}

use core.string
use core.math

#doc """
    Converts a string into an integer. Works with positive and
    negative integers. If given a pointer to a string, will
    modify the string to extract the integer part.
"""
str_to_i64 :: #match #local {}

#overload
str_to_i64 :: macro (s: str, base: u32 = 10) -> i64 {
    str_to_i64 :: str_to_i64;
    s_ := s;
    return str_to_i64(&s_, base);
}

#overload
str_to_i64 :: (s: &str, base: u32 = 10) -> i64 {
    string.strip_leading_whitespace(s);

    value: i64 = 0;
    mul := 1;

    if s.data[0] == #char "-" {
        mul = -1;
        string.advance(s, 1);
    }

    if s.data[0] == #char "+" {
         string.advance(s, 1);
    }

    while !string.empty(*s) {
        switch c := s.data[0]; c {
            case #char "0" .. #char "9" {
                value *= ~~base;
                value += ~~(c - #char "0");
            }

            case #char "A" .. #char "Z" {
                if base <= 10 do fallthrough;

                value *= ~~base;
                value += ~~((c - #char "A") + 10);
            }
            
            case #char "a" .. #char "z" {
                if base <= 10 do fallthrough;

                value *= ~~base;
                value += ~~((c - #char "a") + 10);
            }

            case #default do break break;
        }

        string.advance(s);
    }

    return value * ~~mul;
}


#doc "Converts a string to a floating point number."
str_to_f64 :: #match #local {}

#overload
str_to_f64 :: macro (s: str) -> f64 {
    str_to_f64 :: str_to_f64;
    s_ := s;
    return str_to_f64(&s_);
}

#overload
str_to_f64 :: (s: &str) -> f64 {
    string.strip_leading_whitespace(s);

    sign := parse_sign(s);
    value, _ := parse_digits(s);    

    if s.data[0] == #char "." {
        string.advance(s, 1);
        fraction, fraction_digits := parse_digits(s);
        while fraction_digits > 0 {
            fraction_digits -= 1;
            fraction /= 10;
        }
        value += fraction;
    }

    value *= sign;

    if s.data[0] != #char "e" && s.data[0] != #char "E" do return value;
    string.advance(s, 1);

    exponent_sign := parse_sign(s);
    exponent, _   := parse_digits(s);
    if exponent_sign > 0 {
        while exponent > 0 {
            value *= 10;
            exponent -= 1;
        }
    } else {
        while exponent > 0 {
            value /= 10;
            exponent -= 1;
        }
    }

    return value;


    parse_sign :: (s: &str) -> f64 {
        switch s.data[0] {
            case #char "-" { string.advance(s, 1); return -1; }
            case #char "+" { string.advance(s, 1); return  1; }
            case #default  { return 1; }
        }
    }

    parse_digits :: (s: &str) -> (f64, i32) {
        value: f64 = 0;
        count := 0;
        while s.count > 0 do switch s.data[0] {
            case #char "0" .. #char "9" {
                value = value * 10 + ~~cast(i32)(s.data[0] - #char "0");
                string.advance(s, 1);
                count += 1;
            }

            case #default do break break;
        }
        return value, count;
    }
}


#doc """
    Converts an integer into a string using the buffer provided.
    Supports upto base 64. If prefix is true, binary numbers are
    prefixed with '0b' and hexadecimal numbers are prefixed with
    '0x'.
"""
i64_to_str :: (n: i64, base: u64, buf: [] u8, min_length := 0, prefix := false) -> str {
    is_neg := false;
    if n < 0 {
        is_neg = true;
        n = -n;
    }

    c: [&] u8 = &buf[buf.count - 1];
    len := 0;

    BASE64_MAP := "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/";

    while n > 0 {
        m := cast(u64) n % base;

        c[0] = BASE64_MAP[cast(u32) m];
        len += 1;
        c -= 1;

        n /= base;

    } else {
        c[0] = #char "0";
        len += 1;
        c -= 1;
    }

    if min_length > 0 && len < min_length {
        for i in min_length - len {
            c[0] = #char "0";
            len += 1;
            c -= 1;
        }
    }

    if prefix {
        if base == 16 {
            c[0] = #char "x";
            len += 1;
            c -= 1;
            c[0] = #char "0";
            len += 1;
            c -= 1;
        }

        if base == 2 {
            c[0] = #char "b";
            len += 1;
            c -= 1;
            c[0] = #char "0";
            len += 1;
            c -= 1;
        }
    }

    if is_neg {
        c[0] = #char "-";
        len += 1;
        c -= 1;
    }

    return str.{ data = c + 1, count = len };
}


#doc """
    Converts an unsigned number into a string using the buffer provided.
    Behaves like i64_to_str.
"""
u64_to_str :: (n: u64, base: u64, buf: [] u8, min_length := 0, prefix := false) -> str {
    c: [&] u8 = &buf[buf.count - 1];
    len := 0;

    BASE64_MAP := "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/";

    while n > 0 {
        m := cast(u64) n % base;

        c[0] = BASE64_MAP[cast(u32) m];
        len += 1;
        c -= 1;

        n /= base;

    } else {
        c[0] = #char "0";
        len += 1;
        c -= 1;
    }

    if min_length > 0 && len < min_length {
        for i in min_length - len {
            c[0] = #char "0";
            len += 1;
            c -= 1;
        }
    }

    if prefix {
        if base == 16 {
            c[0] = #char "x";
            len += 1;
            c -= 1;
            c[0] = #char "0";
            len += 1;
            c -= 1;
        }

        if base == 2 {
            c[0] = #char "b";
            len += 1;
            c -= 1;
            c[0] = #char "0";
            len += 1;
            c -= 1;
        }
    }

    return str.{ data = c + 1, count = len };
}

#doc """
    Converts a floating point number into a string, using
    the buffer provided.
   
    This is better than what used to be, but still relies on converting the integer
    part of the float to an integer, which could overflow.
"""
f64_to_str :: (f: f64, buf: [] u8, digits_after_decimal := 4) -> str {
    if math.is_nan(f) {
        return format(buf, "NaN");
    }

    if math.is_inf(f) {
        if f > 0 do return format(buf, "Inf");
        else     do return format(buf, "-Inf");
    }

    len := 0;

    if f < 0 {
        f = -f;
        buf[0] = #char "-";
        len += 1;
    }

    dec_part := f - math.trunc(f);
    int_part := f - dec_part;
    dec_part  = math.abs(dec_part);

    s1 := i64_to_str(~~int_part, 10, buf);
    for i in 0 .. s1.count do buf.data[i + len] = s1.data[i];
    len += s1.count;

    if digits_after_decimal > 0 {
        buf.data[len] = #char ".";
        len += 1;

        digits := "0123456789";

        for i in digits_after_decimal {
            dec_part *= 10;
            v := math.trunc(dec_part);
            dec_part -= v;

            buf.data[len + i] = digits[cast(i32) v];
        }
        len += digits_after_decimal;
    }

    return str.{ buf.data, len };
}


// I like the way that parse_int reads better than 'str_to_i64'.
// For a soft transistion, I am allowing the programmer to use either.
// At some point, it might be worth deprecating 'str_to_i64', but no harm
// in leaving it here for now. Same thing applied to all other functions
// below.
parse_int :: str_to_i64
parse_float :: str_to_f64

format_int :: i64_to_str
format_uint :: u64_to_str
format_float :: f64_to_str
