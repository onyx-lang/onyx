package core.misc

use runtime
use core.iter
use core.array
use core.string

use runtime.info {
    get_type_info,
    Type_Info_Pointer,
    Type_Info_Struct,
    Type_Info_Array,
    Type_Info_Slice,
    Type_Info_Dynamic_Array,

    get_struct_member,
    union_constructed_from
}

// Either to_any or as_any will work. I prefer `as_any` because
// much of the rest of the standard library uses `as_...` for
// conversion.
as_any :: to_any
to_any :: macro (x: &$T) => any.{x, T};

any_as :: (a: any, $T: type_expr) -> &T {
    if a.type != T do return null;
    return cast(&T) a.data;
}

/// Dereference a pointer any.
any_dereference :: (v: any) -> any {
    t := get_type_info(v.type);
    if t.kind == .Pointer {
        p := cast(&Type_Info_Pointer) t;
        return any.{*cast(&rawptr) v.data, p.to};
    }

    return v;
}

/// Unwraps an optional any, if the any is an optional. `? T -> T`
any_unwrap :: (v: any) -> any {
    if union_constructed_from(v.type, Optional) {
        t := v.type->info()->as_union();
        return any.{
            cast([&] u8, v.data) + t.alignment,
            t.variants[1].type
        };
    }

    return v;
}


/// Subscript an array-like any.
any_subscript :: (v: any, index: i32) -> any {
    base_ptr, elem_type, count := any_as_array(v);
    if index >= count || index < 0 {
        return .{ null, void };
    }

    return any.{
        cast([&] u8) base_ptr + get_type_info(elem_type).size * index,
        elem_type
    };
}

/// Select a member from an any.
any_selector :: (v: any, member_name: str) -> any {
    t := get_type_info(v.type);
    if t.kind == .Struct {
        member := get_struct_member(v.type, member_name);
        if member != null {
            return any.{cast([&] u8) v.data + member.offset, member.type};
        }
    }

    return .{null, void};
}

/// Like `any_selector`, but works with selecting \"foo.bar.joe\".
any_nested_selector :: (v: any, member_name: str) -> any {
    t := get_type_info(v.type);
    if t.kind != .Struct do return .{};

    part_name, next_name := string.bisect(member_name, #char ".");

    member := get_struct_member(v.type, part_name);
    if member {
        if next_name {
            return any_nested_selector(any.{cast([&] u8) v.data + member.offset, member.type}, next_name);
        }

        return any.{
            cast([&] u8, v.data) + member.offset, member.type
        };
    }

    return .{null, void};
}

any_member :: #match #locked {
    (v: any, member_type: type_expr, member_offset: u32) -> any {
        return any.{
            cast([&] u8, v.data) + member_offset,
            member_type
        };
    },

    (v: any, member: &Type_Info_Struct.Member) -> any {
        return any.{
            cast([&] u8, v.data) + member.offset,
            member.type
        };
    }
}

/// Convert a structure or pointer to a structure to a Map with
/// keys representing the fields of the structure, and values
/// representing the value of each field.
///
///     T :: struct {
///         x := 123;
///         y := "test";
///     }
///     
///     m := any_to_map(T.{});
///
/// `m` would have two keys, "x" and "y".
any_to_map :: (v: any) -> ? Map(str, any) {
    vals := v;
    if vals.type->info().kind == .Pointer {
        vals = any_dereference(vals);
    }

    val_info := vals.type->info()->as_struct();
    if val_info.kind != .Struct {
        return .{};
    }

    out: Map(str, any);
    for & val_info.members {
        out->put(it.name, any_selector(vals, it.name));
    }

    return out;
}

/// Creates an iterator out of an array-like any.
any_iter :: (arr: any) -> Iterator(any) {
    base_ptr, elem_type, count := any_as_array(arr);
    if count == 0 {
        return .{ null, ((_: rawptr) => any.{}, false) };
    }

    return iter.generator(
        &.{
            base_ptr  = base_ptr,
            elem_type = elem_type,
            elem_size = get_type_info(elem_type).size,
            count     = count,
            index     = 0,
        },

        (ctx: $T) -> (any, bool) {
            if ctx.index < ctx.count {
                defer ctx.index += 1;
                return any.{ cast([&] u8) ctx.base_ptr + ctx.elem_size * ctx.index, ctx.elem_type }, true;
            }

            return .{}, false;
        }
    );
}


#local
any_as_array :: (arr: any) -> (rawptr, type_expr, u32) {
    info := get_type_info(arr.type);

    switch info.kind {
        case .Array {
            a := cast(&Type_Info_Array) info;
            return arr.data, a.of, a.count;
        }

        case .Slice, .Dynamic_Array, .Variadic_Argument {
            a := cast(&array.Untyped_Array) arr.data;
            return a.data, (cast(&Type_Info_Dynamic_Array) info).of, a.count;
        }

        case #default {
            return null, void, 0;
        }
    }
}
