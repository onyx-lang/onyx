package core

use runtime

//
// This file defines an optional language feature called method operators.
// Instead of defining an operator overload using the #operator directive,
// one can simply define a __op method in the structure to define how to
// perform the operations. For example,
//
//     Vec2 :: struct { x, y: f32 }
//
//     Vec2.__add :: (v1, v2: Vec2) => Vec2.{ v1.x + v2.x, v1.y + v2.y };
//
// This is an optional language feature because it currently significantly
// affects compile-time, on average adding 30% to the total compilation time.
// To enable this feature, add this somewhere:
//
//     runtime.vars.Onyx_Enable_Operator_Methods :: true
//

#local {
    __HasEqMethod     :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__eq(t, r); }
    __HasNeMethod     :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__ne(t, r); }
    __HasLtMethod     :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__lt(t, r); }
    __HasLeMethod     :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__le(t, r); }
    __HasGtMethod     :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__gt(t, r); }
    __HasGeMethod     :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__ge(t, r); }
    __HasAddMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__add(t, r); }
    __HasMinusMethod  :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__minus(t, r); }
    __HasMulMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__mul(t, r); }
    __HasDivMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__div(t, r); }
    __HasModMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__mod(t, r); }
    __HasAndMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__and(t, r); }
    __HasOrMethod     :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__or(t, r); }
    __HasShlMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__shl(t, r); }
    __HasShrMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__shr(t, r); }
    __HasSarMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__sar(t, r); }
    __HasXorMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__xor(t, r); }
    __HasBandMethod   :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__band(t, r); }
    __HasBorMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__bor(t, r); }
    __HasSubMethod    :: interface (T: type_expr, R: type_expr) { t as T; r as R; T.__sub(t, r); }
}

#if #defined(runtime.vars.Onyx_Enable_Operator_Methods) {
    #operator ==  #order 10000 macro (t: $T, r: $R) -> #auto where __HasEqMethod(T, R) do return T.__eq(t, r);
    #operator !=  #order 10000 macro (t: $T, r: $R) -> #auto where __HasNeMethod(T, R) do return T.__ne(t, r);
    #operator <   #order 10000 macro (t: $T, r: $R) -> #auto where __HasLtMethod(T, R) do return T.__lt(t, r);
    #operator <=  #order 10000 macro (t: $T, r: $R) -> #auto where __HasLeMethod(T, R) do return T.__le(t, r);
    #operator >   #order 10000 macro (t: $T, r: $R) -> #auto where __HasGtMethod(T, R) do return T.__gt(t, r);
    #operator >=  #order 10000 macro (t: $T, r: $R) -> #auto where __HasGeMethod(T, R) do return T.__ge(t, r);
    #operator +   #order 10000 macro (t: $T, r: $R) -> #auto where __HasAddMethod(T, R) do return T.__add(t, r);
    #operator -   #order 10000 macro (t: $T, r: $R) -> #auto where __HasMinusMethod(T, R) do return T.__minus(t, r);
    #operator *   #order 10000 macro (t: $T, r: $R) -> #auto where __HasMulMethod(T, R) do return T.__mul(t, r);
    #operator /   #order 10000 macro (t: $T, r: $R) -> #auto where __HasDivMethod(T, R) do return T.__div(t, r);
    #operator %   #order 10000 macro (t: $T, r: $R) -> #auto where __HasModMethod(T, R) do return T.__mod(t, r);
    #operator &   #order 10000 macro (t: $T, r: $R) -> #auto where __HasAndMethod(T, R) do return T.__and(t, r);
    #operator |   #order 10000 macro (t: $T, r: $R) -> #auto where __HasOrMethod(T, R) do return T.__or(t, r);
    #operator <<  #order 10000 macro (t: $T, r: $R) -> #auto where __HasShlMethod(T, R) do return T.__shl(t, r);
    #operator >>  #order 10000 macro (t: $T, r: $R) -> #auto where __HasShrMethod(T, R) do return T.__shr(t, r);
    #operator >>> #order 10000 macro (t: $T, r: $R) -> #auto where __HasSarMethod(T, R) do return T.__sar(t, r);
    #operator ^   #order 10000 macro (t: $T, r: $R) -> #auto where __HasXorMethod(T, R) do return T.__xor(t, r);
    #operator &&  #order 10000 macro (t: $T, r: $R) -> #auto where __HasBandMethod(T, R) do return T.__band(t, r);
    #operator ||  #order 10000 macro (t: $T, r: $R) -> #auto where __HasBorMethod(T, R) do return T.__bor(t, r);
    #operator []  #order 10000 macro (t: $T, r: $R) -> #auto where __HasSubMethod(T, R) do return T.__sub(t, r);
}
