package core.list
#allow_stale_code

use core

ListElem :: struct (T: type_expr) {
    next: &ListElem(T) = null;
    prev: &ListElem(T) = null;
    data: T;
}

List :: struct (Elem_Type: type_expr) {
    allocator: Allocator;

    first: &ListElem(Elem_Type) = null;
    last:  &ListElem(Elem_Type) = null;
}

List.free         :: free
List.push_end     :: push_end
List.push_begin   :: push_begin
List.pop_end      :: pop_end
List.pop_begin    :: pop_begin
List.count        :: count
List.at           :: at
List.contains     :: contains
List.fold         :: fold
List.map          :: map
List.as_iter      :: as_iter

make :: ($T: type_expr, allocator := context.allocator) -> List(T) {
    return .{ allocator = allocator };
}

#overload
__make_overload :: (_: &List($T), allocator := context.allocator) -> List(T) {
    return #this_package.make(T, allocator);
}

from_array :: (arr: [] $T, allocator := context.allocator) -> List(T) {
    l := make(T, allocator);
    for& arr {
        push_end(&l, *it);
    }
    return l;
}

free :: (list: &List) {
    elem := list.first;
    while elem != null {
        to_delete := elem;
        elem = elem.next;
        raw_free(list.allocator, to_delete);
    }
}

push_end :: (list: &List, x: list.Elem_Type) {
    new_elem := allocate_elem(list);
    new_elem.data = x;

    new_elem.prev = list.last;
    if list.last do list.last.next = new_elem;
    list.last = new_elem;

    if !list.first do list.first = new_elem;
}

push_begin :: (list: &List, x: list.Elem_Type) {
    new_elem := allocate_elem(list);
    new_elem.data = x;

    new_elem.next = list.first;
    if list.first do list.first.prev = new_elem;
    list.first = new_elem;

    if !list.last do list.last = new_elem;
}

pop_end :: (list: &List($T), default: T = .{}) -> T {
    if list.last == null do return default;

    end := list.last;
    list.last = list.last.prev;
    if list.last {
        list.last.next = null;
    } else {
        list.first = null;
    }

    defer raw_free(list.allocator, end);
    return end.data;
}

pop_begin :: (list: &List($T), default: T = .{}) -> T {
    if list.last == null do return default;

    begin := list.first;
    list.first = list.first.next;
    if list.first {
        list.first.prev = null;
    } else {
        list.last = null;
    }

    defer raw_free(list.allocator, begin);
    return begin.data;
}

pop_end_opt :: (list: &List($T)) -> ? T {
    if list.last == null do return .None;

    end := list.last;
    list.last = list.last.prev;
    if list.last {
        list.last.next = null;
    } else {
        list.first = null;
    }

    defer raw_free(list.allocator, end);
    return end.data;
}

pop_begin_opt :: (list: &List($T)) -> ? T {
    if list.last == null do return .None;

    begin := list.first;
    list.first = list.first.next;
    if list.first {
        list.first.prev = null;
    } else {
        list.last = null;
    }

    defer raw_free(list.allocator, begin);
    return begin.data;
}

empty :: (list: &List) -> bool {
    return list.first == null;
}

count :: (list: &List) -> i32 {
    c := 0;
    elem := list.first;
    while elem != null {
        c += 1;
        elem = elem.next;
    }

    return c;
}

at :: (list: &List($T), index: i32) -> &T {
    elem := list.first;
    while elem != null {
        if index == 0 do return &elem.data;
        index -= 1;
        elem = elem.next;
    }

    return null;
}

contains :: (list: &List, x: list.Elem_Type) -> bool {
    elem := list.first;
    while elem != null {
        if elem.data == x do return true;
        elem = elem.next;
    }

    return false;
}

fold :: (list: &List($T), init: $R, f: (T, R) -> R) -> R {
    val := init;

    link := list.first;
    while link != null {
        val = f(link.data, val);
        link = link.next;
    }

    return val;
}

map :: (list: &List($T), f: (T) -> $R) -> List(R) {
    new_list := make(R, allocator=list.allocator);
    elem := list.first;
    while elem != null {
        push_end(&new_list, f(elem.data));
        elem = elem.next;
    }

    return new_list;
}

as_iter :: (list: &List) =>
    core.iter.generator(&.{current = list.first}, (ctx) => {
        if ctx.current != null {
            defer ctx.current = ctx.current.next;
            return ctx.current.data, true;
        }

        return .{}, false;
    });

#overload
core.iter.as_iter :: as_iter

#local allocate_elem :: macro (list: &List($T)) => new(ListElem(T), allocator=list.allocator);
