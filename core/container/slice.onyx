package core.slice

use core.intrinsics.types {type_is_struct}
use core.memory

//
// [] $T == Slice(T)
//   where
// Slice :: struct (T: type_expr) {
//     data: &T;
//     count: u32;
// }
//

/// Creates a zeroed slice of type `T` and length `length`, using the allocator provided.
///
///     use core {slice, println}
///
///     sl := slice.make(i32, 10);
///     println(sl);
///     // 0 0 0 0 0 0 0 0 0 0
Slice.make :: ($T: type_expr, length: u32, allocator := context.allocator) -> [] T {
    data := raw_alloc(allocator, sizeof T * length);
    memory.set(data, 0, sizeof T * length);
    return .{ data, length };
}

/// Initializes a slice of type `T` to have a length of `length`, using the allocator provided.
///
///     use core {slice, println}
///
///     sl: [] i32;
///     slice.init(&sl, 10);
///     println(sl);
///     // 0 0 0 0 0 0 0 0 0 0
Slice.init :: (sl: &[] $T, length: u32, allocator := context.allocator) {
    sl.count = length;
    sl.data = raw_alloc(allocator, sizeof T * length);
    memory.set(sl.data, 0, sizeof T * length);
}

/// Frees the data inside the slice.
/// The slice is taken by pointer because this procedure also sets the data pointer to `null`, and the length to `0`,
/// to prevent accidental future use of the slice.
Slice.free :: (sl: &[] $T, allocator := context.allocator) {
    if sl.data == null do return;

    raw_free(allocator, sl.data);
    sl.data = null;
    sl.count = 0;
}

//
// Allows for make([] i32).
#overload
__make_overload :: macro (_: &[] $T, count: u32, allocator := context.allocator) -> [] T {
    use core.memory

    ret := Slice.make(T, count, allocator);
    memory.set(ret.data, 0, sizeof T * count);
    return ret;
}

//
// Allows for delete(&sl);
#overload
builtin.delete :: macro (x: &[] $T, allocator := context.allocator) {
    Slice.free(x, allocator);
}


/// Copies a slice to a new slice, allocated from the provided allocator.
Slice.copy :: (sl: [] $T, allocator := context.allocator) -> [] T {
    data := raw_alloc(allocator, sl.count * sizeof T);
    memory.copy(data, sl.data, sl.count * sizeof T);

    return .{ data = data, count = sl.count };
}


/// Creates a new slice and populates by performing the transform function on each element of the existing slice.
Slice.map :: #match #local {}

#overload
Slice.map :: (sl: [] $T, transform: (T) -> $R, allocator := context.allocator) -> [] R {
    new_slice := Slice.make(R, sl.count, allocator)
    for v, i in sl do new_slice[i] = transform(v)
    return new_slice
}

#overload
Slice.map :: macro (sl: [] $T, transform: Code, allocator := context.allocator) => {
    _s := sl
    new_slice := Slice.make(typeof #unquote transform(sl[0]), _s.count, allocator)
    for v, i in _s do new_slice[i] = #unquote transform(v)
    return new_slice
}


/// Modifies a slice in-place without allocating any memory and returns the original slice.
Slice.map_inplace :: #match #local {}

#overload
Slice.map_inplace :: (sl: [] $T, transform: (T) -> T, allocator := context.allocator) => {
    for &v in sl do *v = transform(*v)
    return sl
}

#overload
Slice.map_inplace :: macro (sl: [] $T, transform: Code, allocator := context.allocator) => {
    _s := sl
    for &v in _s do *v = #unquote transform(*v)
    return _s
}


/// Moves an element to a new index, ensuring that order of other elements is retained.
///
///     use core {slice, println}
///
///     arr := i32.[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
///
///     // Move element at index 4 to index 8
///     slice.transplant(arr, 4, 8);
///
///     println(arr);
///     // 1 2 3 4 6 7 8 9 5 10
Slice.transplant :: (arr: [] $T, old_index: i32, new_index: i32) -> bool {
    if old_index < 0 || old_index >= arr.count do return false;
    if new_index < 0 || new_index >= arr.count do return false;
    if old_index == new_index do return true;

    value := arr.data[old_index];

    if old_index < new_index { // Moving forward
        while i := old_index; i < new_index {
            defer i += 1;
            arr.data[i] = arr.data[i + 1];
        }

    } else { // Moving backward
        while i := old_index; i > new_index {
            defer i -= 1;
            arr.data[i] = arr.data[i - 1];
        }
    }

    arr.data[new_index] = value;
    return true;
}

/// Get an element from a slice, with negative and wrap-around indexing.
Slice.get :: (arr: [] $T, idx: i32) -> T {
    if arr.count == 0 do return .{};

    while idx < 0          do idx += arr.count;
    while idx >= arr.count do idx -= arr.count;

    return arr.data[idx];
}

/// Get an element from a slice, with negative and wrap-around indexing.
Slice.get_opt :: (arr: [] $T, idx: i32) -> ? T {
    if arr.count == 0 do return .None

    while idx < 0          do idx += arr.count
    while idx >= arr.count do idx -= arr.count

    return arr.data[idx]
}

/// Get a pointer to an element from a slice, with negative and wrap-around indexing.
Slice.get_ptr :: (arr: [] $T, idx: i32) -> &T {
    if arr.count == 0 do return null;

    while idx < 0          do idx += arr.count;
    while idx >= arr.count do idx -= arr.count;

    return &arr.data[idx];
}

/// Set a value in a slice, with negative and wrap-around indexing.
Slice.set :: (arr: [] $T, idx: i32, value: T) {
    if arr.count == 0 do return;

    while idx < 0          do idx += arr.count;
    while idx >= arr.count do idx -= arr.count;

    arr.data[idx] = value;
}

Slice.contains :: #match #locked {
    (arr: [] $T, x: T) -> bool {
        for it in arr do if it == x do return true;
        return false;
    }, 

    macro (arr: [] $T, $cmp: Code) -> bool {
        for it in arr do if #unquote cmp(it) do return true;
        return false;
    }
}

/// Tests if the slice is empty.
///
/// Normally this is unneeded, as arrays have a 'truthiness'
/// that depends on their count. For example, instead of saying:
///
///     if slice.empty(arr) { ... }
///
/// You can simply say:
///
///     if !arr { ... }
Slice.empty :: (arr: [] $T) => arr.count == 0;

/// Uses `+` to sum all elements in the slice.
Slice.sum :: (arr: [] $T, start: T = 0) -> T {
    sum := start;
    for it in arr do sum += it;
    return sum;
}

/// Uses `*` to multiply all elements in the slice.
Slice.product :: (arr: [] $T, start: T = 1) -> T {
    prod := start;
    for it in arr do prod *= it;
    return prod;
}

/// Uses `+` to add the elements together.
/// Then use `/ i32` to divide by the number of elements.
/// Both of these are assumed to work.
Slice.average :: (arr: [] $T) -> T {
    sum := cast(T) 0;
    for it in *arr do sum += it;

    return sum / cast(T) arr.count;
}

/// Reverses a slice in-place.
Slice.reverse :: (arr: [] $T) {
    for i in arr.count / 2 {
        tmp := arr[i];
        arr[i] = arr[arr.count - 1 - i];
        arr[arr.count - 1 - i] = tmp;
    }
}

/// Simple insertion sort.
/// 
/// `cmp` should return greater-than 0 if `left > right`.
///
/// Returns the array to be used in '|>' chaining.
///
/// **Not a copy of the slice.**
Slice.sort :: #match #local {}

#overload
Slice.sort :: (arr: [] $T, cmp: (T, T) -> i32) -> [] T {
    for i in 1 .. arr.count {
        x := arr.data[i];
        j := i - 1;

        // @ShortCircuitLogicalOps
        // This is written this way because '&&' does not short circuit right now.
        while j >= 0 {
            if cmp(arr.data[j], x) > 0 {
                arr.data[j + 1] = arr.data[j];
                j -= 1;
            } else {
                break;
            }
        }

        arr.data[j + 1] = x;
    }

    return arr;
}

#overload
Slice.sort :: (arr: [] $T, cmp: (&T, &T) -> i32) -> [] T {
    for i in 1 .. arr.count {
        j := i;

        while j > 0 {
            if cmp(&arr.data[j - 1], &arr.data[j]) > 0 {
                tmp := arr.data[j];
                arr.data[j] = arr.data[j - 1];
                arr.data[j - 1] = tmp;

                j -= 1;
            } else {
                break;
            }
        }
    }

    return arr;
}

/// Quicksort a slice.
///
/// `cmp` should return greater-than 0 if `left > right`.
Slice.quicksort :: #match #locked {
    (arr: [] $T, cmp: ( T,  T) -> i32) => { quicksort_impl(arr, cmp, 0, arr.count - 1); return arr; },
    (arr: [] $T, cmp: (&T, &T) -> i32) => { quicksort_impl(arr, cmp, 0, arr.count - 1); return arr; },
}

#local {
    quicksort_impl :: (arr: [] $T, cmp: $PredicateFunction, lo, hi: i32) {
        if lo < 0 || hi < 0 do return;
        if lo >= hi do return;

        pivot := quicksort_partition(arr, cmp, lo, hi);
        quicksort_impl(arr, cmp, lo, pivot - 1);
        quicksort_impl(arr, cmp, pivot + 1, hi);
    }

    quicksort_partition :: #match #local {}

    #overload
    quicksort_partition :: (arr: [] $T, cmp: (T, T) -> i32, lo, hi: i32) -> i32 {
        pivot := arr[hi];
        i := lo - 1;

        for j in lo .. hi+1 {
            if cmp(arr[j], pivot) <= 0 {
                i += 1;
                tmp := arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
            }
        }

        return i;
    }

    #overload
    quicksort_partition :: (arr: [] $T, cmp: (&T, &T) -> i32, lo, hi: i32) -> i32 {
        pivot := &arr[hi];
        i := lo - 1;

        for j in lo .. hi+1 {
            if cmp(&arr[j], pivot) <= 0 {
                i += 1;
                tmp := arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
            }
        }

        return i;
    }
}

/// Shrinks a slice, removing all duplicates of elements, using `==`
/// to compare elements.
///
/// This assumes that the elements are sorted in some fashion,
/// such that equal elements would be next to each other.
Slice.unique :: (arr: &[] $T) {
    idx := 0;
    while i := 0; i < arr.count - 1 {
        defer i += 1;

        if idx != i {
            arr.data[idx] = arr.data[i];
        }

        if !(arr.data[i] == arr.data[i + 1]) {
            idx += 1;
        }
    }

    arr.data[idx] = arr.data[arr.count - 1];
    arr.count = idx + 1;
}


/// Reduces a slice down to a single value, using successive calls to `f`, or invokations of the `body`.
///
///     use core {slice, println}
///
///     arr := i32.[1, 2, 3, 4, 5];
///
///     slice.fold(arr, 0, (it, acc) => it + acc) |> println();
///     
///     // OR
///     
///     slice.fold(arr, 0, [it, acc](it + acc)) |> println();
Slice.fold :: #match #local {}

#overload
Slice.fold :: (arr: [] $T, init: $R, f: (T, R) -> R) -> R {
    val := init;
    for it in arr do val = f(it, val);
    return val;
}

#overload
Slice.fold :: macro (arr: [] $T, init: $R, body: Code) -> R {
    acc := init;
    for it in arr do acc = #unquote body(it, acc);
    return acc;
}


Slice.fold1 :: #match #local {}

#overload
Slice.fold1 :: (arr: [] $T, f: (T, T) -> T) -> ? T {
    if arr.count == 0 do return .None

    val := arr[0];
    for it in arr[1 .. arr.count] do val = f(it, val);
    return val;
}

#overload
Slice.fold1 :: macro (arr: [] $T, body: Code) -> ? T {
    if arr.count == 0 do return .None

    acc := arr[0];
    for it in arr[1 .. arr.count] do acc = #unquote body(it, acc);
    return acc;
}

/// Returns `true` if *every* element in the slice meets the predicate test.
Slice.every :: #match #local {}

#overload
Slice.every :: macro (arr: [] $T, predicate: (T) -> bool) => Slice.every(arr, [it](predicate(it)));

#overload
Slice.every :: macro (arr: [] $T, predicate_body: Code) -> bool {
    for arr {
        if !(#unquote predicate_body(it)) do return false;
    }
    return true;
}

/// Returns `true` if *at least one* element in the slice meets the predicate test.
Slice.some :: #match #local {}

#overload
Slice.some :: macro (arr: [] $T, predicate: (T) -> bool) => Slice.some(arr, [it](predicate(it)));

#overload
Slice.some :: macro (arr: [] $T/type_is_struct, predicate_body: Code) -> bool {
    for & arr {
        if #unquote predicate_body(it) do return true;
    }
    return false;
}

#overload
Slice.some :: macro (arr: [] $T, predicate_body: Code) -> bool {
    for arr {
        if #unquote predicate_body(it) do return true;
    }
    return false;
}

/// Sets all elements in a slice to be `value`.
Slice.fill :: (arr: [] $T, value: T) {
    for i in arr.count {
        arr[i] = value;
    }
}

/// Sets all elements in the range to be `value`.
Slice.fill_range :: (arr: [] $T, r: range, value: T) {
    for i in r {
        if i >= arr.count || i < 0 do continue;
        arr[i] = value;
    }
}

/// Converts a slice to a linked list.
Slice.to_list :: (arr: [] $T, allocator := context.allocator) -> List(T) {
    new_list := list.make(T, allocator);

    for &it in arr {
        list.push_end(&new_list, *it);
    }

    return new_list;
}

/// Returns the index of the first element that matches the predicate.
///
/// Returns `-1` if no matching element is found.
Slice.find :: #match #local {}

#overload
Slice.find :: (arr: [] $T, value: T) -> i32 {
    for i in arr.count {
        if value == arr.data[i] do return i;
    }

    return -1;
}

#overload
Slice.find :: macro (arr: [] $T/type_is_struct, pred: Code) -> i32 {
    for i in arr.count {
        it := &arr[i];
        if #unquote pred(it) do return i;
    }

    return -1;
}

#overload
Slice.find :: macro (arr: [] $T, pred: Code) -> i32 {
    for i in arr.count {
        it := arr[i];
        if #unquote pred(it) do return i;
    }

    return -1;
}

/// Returns a pointer to the first element that equals `value`, compared using `==`.
///
/// Returns `null` if no matching element is found.
Slice.find_ptr :: (arr: [] $T, value: T) -> &T {
    for &it in arr {
        if value == *it do return it;
    }

    return null;
}

/// Returns an optional of the first element that the code block evaluates to a truthy value.
Slice.find_opt :: #match {
    macro (arr: [] $T/type_is_struct, cond: Code) -> ? T {
        for& it in arr {
            if #unquote cond(it) {
                return *it;
            }
        }
        return .{};
    },

    macro (arr: [] $T, cond: Code) -> ? T {
        for it in arr {
            if #unquote cond(it) {
                return it;
            }
        }
        return .{};
    },
}

Slice.first :: #match #locked {
    macro (arr: [] $T, predicate: (T) -> bool) -> &T {
        return Slice.first(arr, [it](predicate(it)));
    },

    macro (arr: [] $T/type_is_struct, predicate_body: Code) -> &T {
        for & arr {
            if #unquote predicate_body(it) do return it;
        }

        return null;
    },

    macro (arr: [] $T, predicate_body: Code) -> &T {
        // This is to preserve the semantics that "it" is
        // not a pointer (same as contains), when T is not a
        // structure.
        for &it_ptr in arr {
            it := *it_ptr;
            if #unquote predicate_body(it) do return it_ptr;
        }

        return null;
    }
}

/// Returns the number of elements for which the predicate is true.
Slice.count_where :: #match #local {}

#overload
Slice.count_where :: macro (arr: [] $T, predicate: (T) -> bool) => Slice.count_where(arr, [it](predicate(it)));

#overload
Slice.count_where :: macro (arr: [] $T, predicate_body: Code) -> u32 {
    count: u32 = 0;
    for arr {
        if #unquote predicate_body(it) do count += 1;
    }
    return count;
}


/// Creates an iterator of a sliding window over the elements of the slice, with width `width`.
Slice.windows :: (arr: [] $T, width: i32) -> Iterator([] T) {
    use core {iter}

    return iter.generator(
        &.{ arr=arr, width=width, pos=0 },
        ctx => {
            if ctx.pos + ctx.width < ctx.arr.count {
                defer ctx.pos += 1;
                return Optional.make(ctx.arr.data[ctx.pos .. ctx.pos+ctx.width])
            }

            return .None
        }
    );
}

/// Creates an iterator of chunks over the elements of the slice.
/// Each chunk has size `width`, with the last chunk having size `arr.count % width`.
Slice.chunks :: (arr: [] $T, width: i32) -> Iterator([] T) {
    use core {iter}

    return iter.generator(
        &.{ arr=arr, width=width, pos=0 },
        ctx => {
            if ctx.pos < ctx.arr.count {
                defer ctx.pos += ctx.width;

                end := core.math.min(ctx.pos+ctx.width, ctx.arr.count);
                return Optional.make(ctx.arr.data[ctx.pos .. end])
            }

            return .None
        }
    );
}


/// Groups a slice into sub-slices using the comparison function.
///
/// `comp` should evaluate to a boolean value.
///
/// Expects slice to sorted so all equal values are next to each other.
Slice.group_by :: #match #local {}

#overload
Slice.group_by :: macro (arr: [] $T, comp: (T, T) -> bool, allocator := context.allocator) -> [..] [] T {
    return Slice.group_by(arr, [a, b](comp(a, b)), allocator);
}

#overload
Slice.group_by :: macro (arr_: [] $T, comp: Code, allocator := context.allocator) -> [..] [] T {
    out := builtin.make([..] [] T, allocator);
    if arr_.count == 0 do return out;

    start := 0;
    arr := arr_;
    for i in 1 .. arr.count {
        if !#unquote comp(arr[start], arr[i]) {
            out << arr[start .. i];
            start = i;
        }
    }

    out << arr[start .. arr.count];
    return out;
}



#local HasEquals :: interface (T: type_expr) {
    t as T;
    { t == t } -> bool;
}

Slice.equal :: (arr1: [] $T/HasEquals, arr2: [] T) -> bool {
    if arr1.count != arr2.count do return false;

    for i in arr1.count {
        if !(arr1[i] == arr2[i]) do return false;
    }

    return true;
}


#local fold_idx_elem :: (arr: [] $T, $cmp: Code) -> (i32, T) {
    idx  := 0;
    elem := arr[0];

    for i in 1 .. arr.count {
        A := &arr[i];
        B := &elem;
        if #unquote cmp {
            idx  = i;
            elem = arr[i];
        }
    }

    return idx, elem;
}

/// Returns the largest element in the array, using `>` to compare.
Slice.greatest :: macro (arr: [] $T) -> (i32, T) {
    fold_idx_elem :: fold_idx_elem
    return fold_idx_elem(arr, [](*A > *B));
}

/// Returns the smallest element in the array, using `<` to compare.
Slice.least :: macro (arr: [] $T) -> (i32, T) {
    fold_idx_elem :: fold_idx_elem
    return fold_idx_elem(arr, [](*A < *B));
}


//
// Everything below here only exists for backwards compatibility.
//

transplant  :: Slice.transplant
get         :: Slice.get
get_ptr     :: Slice.get_ptr
set         :: Slice.set
contains    :: Slice.contains
empty       :: Slice.empty
sum         :: Slice.sum
product     :: Slice.product
average     :: Slice.average
reverse     :: Slice.reverse
sort        :: Slice.sort
quicksort   :: Slice.quicksort
unique      :: Slice.unique
fold        :: Slice.fold
every       :: Slice.every
some        :: Slice.some
group_by    :: Slice.group_by
fill        :: Slice.fill
fill_range  :: Slice.fill_range
to_list     :: Slice.to_list
find        :: Slice.find
find_ptr    :: Slice.find_ptr
find_opt    :: Slice.find_opt
first       :: Slice.first
count_where :: Slice.count_where
windows     :: Slice.windows
chunks      :: Slice.chunks
greatest    :: Slice.greatest
least       :: Slice.least
free        :: Slice.free
copy        :: Slice.copy
make        :: Slice.make
init        :: Slice.init

