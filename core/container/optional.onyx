package core

use core

// Optional is helper type that encapsulates the idea of an empty
// value, without resorting to null pointers. Optionals are usually
// provided as a return value from procedures that could fail. There
// are several helper methods that you can use to make it easier to
// work with optionals.

// Because Optional is a newer addition to the standard library of Onyx,
// much of the standard library does not use it. Currently it is only
// used by Map and Set in their `get_opt` function. In theory, it should
// be used in many more places, instead of returning `.{}`.

/// Helper procedure for creating an Optional with a value.
/// Pass a type as the first argument to force the type, otherwise
/// the type will be inferred from the parameter type.
Optional.make :: #match #locked {
    ((x: $T) => (?T).{ Some = x }),
    ($T: type_expr, x: T) => ((?T).{ Some = x })
}

/// Create an empty Optional of a certain type. This procedure
/// is mostly useless, because you can use `.{}` in type inferred
/// places to avoid having to specify the type.
Optional.empty :: macro (T: type_expr) => (?T).{ None = .{} }; 

/// Converts a pointer to an optional by defining `null` to be `None`,
/// and a non-null pointer to be `Some`. This dereferences the valid
/// pointer to return the data stored at the pointer's address.
Optional.from_ptr :: macro (p: &$T) -> ?T {
    p_ := p
    if p_ do return *p_
    return .None
}

/// Extracts the value from the Optional, or uses a default if
/// no value is present.
Optional.value_or :: (o: ?$T, default: T) => switch o {
    case .Some as v => v
    case _          => default
}

/// Clears the value in the Optional, zeroing the memory of the value.
Optional.reset :: (o: &?$T) {
    *o = .None
}

/// Sets the value in the Optional.
Optional.set :: (o: &?$T, value: T) {
    *o = .{ Some = value }
}

/// Flattens nested optionals.
// @Bug should be able to say ? ? $T here.
Optional.flatten :: (o1: ? Optional($T)) -> ? T {
    switch o1 {
        case .Some as o2 {
            return o2
        }

        case .None ---
    }

    return .None
}

/// Monadic chaining operation.
Optional.and_then :: (o: ?$T, transform: (T) -> ?$R) -> ?R {
    return switch o {
        case .Some as v => transform(v)
        case _          => .None
    }
}

/// Changes the value inside the optional, if present.
Optional.transform :: (o: ?$T, transform: (T) -> $R) -> ?R {
    switch o {
        case .Some as v do return .{ Some = transform(v) }
        case _          do return .None
    }
}

/// Like `value_or`, but instead of providing a value, you
/// provide a function to generate a value.
Optional.or_else :: (o: ?$T, generate: () -> ?T) -> ?T {
    return switch o {
        case .Some => o
        case _     => generate()
    }
}

/// Returns the value inside the optional, if there is one.
/// If not, an assertion is thrown and the context's assert
/// handler must take care of it.
Optional.unwrap :: (o: ?$T) -> T {
    switch o {
        case .Some as v do return v
        case _ {
            panic("Unwrapping empty Optional.")
            return .{}
        }
    }
}

/// Returns a pointer to the value inside the optional, if there is one.
/// If not, an assertion is thrown and the context's assert handler must
/// take care of it.
Optional.unwrap_ptr :: (o: & ?$T) -> &T {
    switch o {
        case .Some as &v do return v
        case _ {
            panic("Unwrapping empty Optional.")
            return .{}
        }
    }
}

/// Returns the value inside the optional, if there is one.
/// If not, an assertion is thrown and the context's assert
/// handler must take care of it.
Optional.expect :: (o: ?$T, message: str) -> T {
    switch o {
        case .Some as v do return v
        case _ {
            panic(message)
            return .{}
        }
    }
}

/// Returns a pointer to the value inside the optional, if there is one.
/// If not, an assertion is thrown and the context's assert handler must
/// take care of it.
Optional.expect_ptr :: (o: & ?$T, message: str) -> &T {
    switch o {
        case .Some as &v do return v
        case _ {
            panic(message)
            return .{}
        }
    }
}

Optional.or_return :: #match {
    macro (o: ?$T) -> T {
        switch value := o; value {
            case .Some as v do return v
            case _ {
                return return .{}
            }
        }
    },
    macro (o: ?$T, return_value: $R) -> T {
        switch value := o; value {
            case .Some as v do return v
            case _ {
                return return return_value
            }
        }
    },
}

Optional.into_result :: macro (o: ?$T, err: $R) -> Result(T, R) {
    switch value := o; value {
        case .Some as v do return .{ Ok = v }
        case _          do return .{ Err = err }
    }
}

Optional.catch :: macro (o: ?$T, body: Code) -> T {
    switch value := o; value {
        case .Some as v do return v
        case .None {
            #unquote body
        }
    }
}

Optional.with :: macro (o: ?$T, body: Code) {
    switch o {
        case .None ---
        case .Some as it {
            #unquote body(it)
        }
    }
}

Optional.hash :: (o: ?$T/core.hash.Hashable) => switch o {
    case .Some as v => core.hash.hash(v)
    case _          => 0
}

#operator== :: (o1, o2: ?$T) -> bool {
    if cast(Optional(T).tag_enum, o1) != cast(Optional(T).tag_enum, o2) do return false
    if o1.tag == .None do return true

    v1 := o1->unwrap()
    v2 := o2->unwrap()
    return v1 == v2
}

#operator?? :: macro (opt: ?$T, default: T) -> T {
    return switch value := opt; value {
        case .Some as v => v
        case _          => default
    }
}

#operator?? :: macro (opt: ?$T, catch: Code) -> T {
    switch value := opt; value {
        case .Some as v do return v
        case _ ---
    }

    #unquote catch
}

#operator? :: macro (opt: ?$T) -> T {
    switch value := opt; value {
        case .Some as v do return v
        case _ do return #from_proc .{}
    }
}

#operator! :: macro (o: ? $T) => o->unwrap()


#overload
__implicit_bool_cast :: macro (o: ?$T) => cast(Optional(T).tag_enum, o) == .Some

