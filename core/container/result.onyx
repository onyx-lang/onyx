package core

//
// Result is helper type that encapsulates the idea of a computation
// that could either succeed with a value, or fail with an error.
// Generally, this is only used as the return type of a procedure,
// but it can be used elsewhere. Like Optional, there are several
// helper methods that make it easier to work with Results.
//

use core
use core.conv

use core {Optional}

/// Result(T, E) is a structure that represents either an Ok value
/// of type T, or an Err value of type E. `status` contains either
/// .Ok, or .Err depending on which is currently held.
Result :: union (Ok_Type: type_expr, Err_Type: type_expr) {
    Err: Err_Type;
    Ok: Ok_Type;
}


/// Returns true if the result contains an Ok value.
Result.is_ok :: (r: #Self) -> bool {
    return switch r {
        case .Ok => true;
        case #default => false;
    };
}

/// Returns true if the result contains an Err value.
Result.is_err :: (r: #Self) -> bool {
    return switch r {
        case .Err => true;
        case #default => false;
    };
}

/// Returns an Optional of the Ok type.
Result.ok :: (r: #Self) -> Optional(r.Ok_Type) {
    return switch r {
        case .Ok as v => Optional.make(v);
        case #default => .{};
    };
}

/// Returns an Optional of the Err type.
Result.err :: (r: #Self) -> Optional(r.Err_Type) {
    return switch r {
        case .Err as v => Optional.make(v);
        case #default => .{};
    };
}

/// Forcefully extracts the Ok value out of the Result. If the
/// result contains an Err, an assertion is thrown.
Result.unwrap :: (r: #Self) -> r.Ok_Type {
    switch r {
        case .Ok as v do return v;
        case .Err as err {
            msg := tprintf("Unwrapping Result with error '{}'.", err);
            assert(false, msg);
            return .{};
        }
    }
}

/// Tries to extract the Ok value out of the Result. If the
/// result contains an Err, the empty .{} value is returned.
Result.unwrap_or_default :: (r: #Self) -> r.Ok_Type {
    return switch r {
        case .Ok as v => v;
        case #default => .{};
    };
}

/// Tries to extract the Ok value out of the Result. If the
/// result contains an Err, a custom assertion message is thrown.
Result.expect :: (r: #Self, msg: str) -> r.Ok_Type {
    switch r {
        case .Ok as v do return v;
        case #default {
            assert(false, msg);
            return .{};
        }
    }
}

/// Returns a new result defined by:
///     Ok(n)  => Ok(f(n))
///     Err(e) => Err(e)
Result.transform :: (r: Result($T, $E), f: (T) -> $R) -> Result(R, E) {
    return switch r {
        case .Ok as v => .{ Ok = f(v) };
        case .Err as v => .{ Err = v };
    };
}

/// Monadic chaining operation.
Result.and_then :: (r: #Self, f: (r.Ok_Type) -> Result($R, r.Err_Type)) -> Result(R, r.Err_Type) {
    return switch r {
        case .Ok as v  => f(v);
        case .Err as v => .{ Err = v };
    };
}

/// If the Result contains Err, generate is called to make a value
Result.or_else :: (r: #Self, generate: () -> typeof r) => {
    return switch r {
        case .Ok as v   => v;
        case #default => generate();
    };
}

/// If result contains Err, the error is returned from the enclosing
/// procedure. Otherwise, the Ok value is returned.
///
///     f :: () -> Result(i32, str) {
///         return .{ Err = "Oh no..." };
///     }
///     
///     g :: () -> Result(str, str) {
///         // This returns from g with the error returned from f.
///         v := f()->forward_err();
///         println(v);
///         
///         return .{ Ok = "Success!" };
///     }
Result.forward_err :: macro (r: Result($T, $E)) -> T {
    switch res := r; res {
        case .Ok as v  do return v;
        case .Err as v do return return .{ Err = v };
    }
}

/// If result contains Err, the error is mapped to a new error type.
Result.transform_err :: macro (r: Result($T, $E), f: (E) -> $N) -> Result(T, N) {
    switch res := r; res {
        case .Ok  as v do return .{ Ok = v };
        case .Err as v do return .{ Err = f(v) };
    }
}

/// If result contains Err, the given value is returned from the
/// enclosing procedure. Otherwise, the Ok value is returned.
Result.or_return :: macro (r: Result($T, $E), v: $V) -> T {
    switch res := r; res {
        case .Ok as v  do return v;
        case .Err do return return v;
    }
}

/// If result contains Err, the given code is run. This code is
/// expected to either:
/// - Return a good value with `return`
/// - Return an error value with `return return`
///
/// This procedure is subject to change.
Result.catch :: macro (r: Result($T, $E), on_err: Code) -> T {
    switch res := r; res {
        case .Ok as v  do return v;
        case .Err as err {
            #unquote on_err(err);
        }
    }
}

#overload
__implicit_bool_cast :: macro (r: Result($O, $E)) => cast(Result(O, E).tag_enum, r) == .Ok;


#operator ? macro (r: Result($T, $E)) -> T {
    switch res := r; res {
        case .Ok as v do return v;
        case .Err as v do return return .{ Err = v };
    }
}

#operator ?? macro (r: Result($T, $E), v: T) -> T {
    return switch res := r; res {
        case .Ok as val => val;
        case .Err => v;
    };
}


