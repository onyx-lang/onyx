package core.iter

use core
use core.memory
use core.alloc
use core.array
use runtime

use core {Pair}
use core.intrinsics.types {type_is_struct}


//
// Iterator is a builtin type known by the compiler, as Iterators
// can be used in for-loops natively without any translation.

#overload
__for_expansion :: macro (iterator: Iterator($T), $flags: __For_Expansion_Flags, $body: Code) where 
    !(flags & .BY_POINTER) && (body.capture_count == 2)
{
    _iterator := iterator

    #if !(flags & .NO_CLOSE) {
        defer if _iterator.close != null_proc {
            _iterator.close(_iterator.data)
        }
    }

    #if #defined(body.capture_type_2) {
        _i: body.capture_type_2
    } else {
        _i: i32
    }

    while true {
        defer _i += 1

        value := _iterator.next(_iterator.data)
        if value.tag == .None do break

        _it := *cast(&T) (cast([&] u8, &value) + alignof ? T)
        #unquote body(_it, _i) #scope(body)
    }
}

#overload
__for_expansion :: macro (iterator: Iterator($T), $flags: __For_Expansion_Flags, $body: Code) where 
    !(flags & .BY_POINTER) && (body.capture_count == 1)
{
    _iterator := iterator

    #if !(flags & .NO_CLOSE) {
        defer if _iterator.close != null_proc {
            _iterator.close(_iterator.data)
        }
    }

    while true {
        value := _iterator.next(_iterator.data)
        if value.tag == .None do break

        _it := *cast(&T) (cast([&] u8, &value) + alignof ? T)
        #unquote body(_it) #scope(body)
    }
}


Iterator.from :: as_iter
Iterator.next :: next
Iterator.close :: close
Iterator.next_opt :: next_opt
Iterator.empty :: empty
Iterator.counter :: counter

Iterator.filter :: filter;
Iterator.map :: map;
Iterator.flat_map :: flat_map;
Iterator.zip :: zip;

Iterator.take :: take;
Iterator.take_while :: take_while;
Iterator.skip :: skip;
Iterator.skip_while :: skip_while;

Iterator.flatten :: flatten;
Iterator.enumerate :: enumerate;
Iterator.group_by :: group_by;

Iterator.find :: find;
Iterator.fold :: fold;
Iterator.fold1 :: fold1;
Iterator.scan :: scan
Iterator.scan1 :: scan1
Iterator.count :: count;
Iterator.some :: some;
Iterator.every :: every;
Iterator.sum   :: sum;
Iterator.collect :: to_array;
Iterator.collect_map :: to_map;

Iterator.generator :: generator
Iterator.generator_no_copy :: generator_no_copy
Iterator.comp :: comp
Iterator.prod :: prod

Iterator.single :: single
Iterator.const  :: const



/// The standard function to convert something to an Iterator.
/// For-loops currently do not use this function to determine
/// how to iterate over something unknown, but that could be
/// a feature down the line.
as_iter :: #match -> Iterator {}

/// Helper interface to test if something can be passed to
/// as_iter successfully.
Iterable :: interface (T: type_expr) {
    t as T;
    { as_iter(t) } -> Iterator;
}

/// Helper function to get the next value out of an iterator.
next :: (it: Iterator) -> ? it.Iter_Type {
    return it.next(it.data);
}

/// Helper function to get the next value out of an iterator, but translated to an optional.
/// Returns `None` if the iterator was empty, `Some(value)` otherwise.
next_opt :: (it: Iterator) -> ? it.Iter_Type {
    return it.next(it.data);
}

/// Helper function to close an iterator, if a close function is defined.
close :: (it: Iterator) {
    if it.close != null_proc {
        it.close(it.data);
    }
}


/// Helper function to create an iterator of a type that does not produce an values.
empty :: ($T: type_expr) -> Iterator(T) {
    return .{
        // CLEANUP: Fix the compiler bug that makes this not able to a closure.
        next = #solidify ($T: type_expr, _: rawptr) -> ? T {
            return .None;
        } { T = T }
    };
}


/// Helper function to create an infinite counting iterator.
///
/// Use `start` to configure the starting value.
///
/// Use `type` to configure the type used for the iterator.
counter :: (start: type = 0, $type: type_expr = i32) -> Iterator(type) {
    return generator(
        &.{ i = start },
        ctx => {
            defer ctx.i += 1;
            return Optional.make(ctx.i);
        }
    );
}


//
// Implicit iterator creation
//
// The following overloads of as_iter allow for an automatic
// definition of how to declare an iterator, provided the
// type has the necessary methods.
//

#overload #order 10000
as_iter :: (x: &$T/ImplicitIterator) => {
    x->iter_open();
    return generator_no_copy(x, T.iter_next, T.iter_close);
}

#local
ImplicitIterator :: interface (T: type_expr) {
    t as T;

    { t->iter_open() } -> void;
    t->iter_next();
    { t->iter_close() } -> void;
}


#overload #order 10000
as_iter :: macro (x: $T/HasAsIter) => x->as_iter();

#local
HasAsIter :: interface (T: type_expr) {
    t as T;

    { t->as_iter() } -> Iterator;
}



//
// Iterator Transformers
//
// Most of these procedures come in two variants,
// one that takes a context paramter, and one that does not.

/// Only yields the values for which the predicate is true.
filter :: #match #local {}

#overload
filter :: (it: Iterator($T), predicate: (T) -> bool) =>
    generator(
        &.{ iterator = it, predicate = predicate },

        fi => {
            value := next(fi.iterator);
            if value {
                while !fi.predicate(value->unwrap()) {
                    value = next(fi.iterator);
                    if !value do break;
                }
                return value;
            }
            return value;
        },

        fi => { close(fi.iterator); });

#overload
filter :: (it: Iterator($T), ctx: $Ctx, predicate: (T, Ctx) -> bool) =>
    generator(
        &.{ iterator = it, predicate = predicate, ctx = ctx },

        (fi: $C) -> ? T {
            value := next(fi.iterator);
            if value {
                while !fi.predicate(value->unwrap(), fi.ctx) {
                    value = next(fi.iterator);
                    if !value do return .None;
                }
                return value;
            }
            return .None;
        },

        fi => { close(fi.iterator); });


/// Transforms every value that comes out of an iterator
/// using the transform function.
map :: #match #local {}

#overload
map :: (it: Iterator($T), transform: (T) -> $R) =>
    generator(
        &.{ iterator = it, transform = transform },

        (mi: $C) -> ? R {
            v := next(mi.iterator);
            return switch v {
                case .Some as v => Optional.make(mi.transform(v));
                case .None      => .None;
            };
        },

        mi => { close(mi.iterator); })

#overload
map :: (it: Iterator($T), ctx: $Ctx, transform: (T, Ctx) -> $R) =>
    generator(
        &.{ iterator = it, transform = transform, ctx = ctx },

        (mi: $C) -> ? R {
            v := next(mi.iterator);
            return switch v {
                case .Some as v => Optional.make(mi.transform(v, mi.ctx));
                case .None      => .None;
            };
        },

        mi => { close(mi.iterator); })


/// Transforms every value that comes out of an iterator
/// using the transform function into a new iterator, from
/// which subsequent values will be output.
///
///     iter.flat_map(iter.as_iter(1 .. 5), x => iter.as_iter(1 .. x+1))
///     // 1, 1, 2, 1, 2, 3, 1, 2, 3, 4
flat_map :: #match #local {}

#overload
flat_map :: (it: Iterator($T), transform: (T) -> Iterator($R)) =>
    generator(
        &.{ iterator = it, transform = transform, inner_iter = Iterator(R).{}, get_new_inner = true },

        mi => {
            while true {
                if mi.get_new_inner {
                    mi.get_new_inner = false;
                    switch next(mi.iterator) {
                        case .None do break break;
                        case .Some as t {
                            mi.inner_iter = mi.transform(t);
                        }
                    }
                }

                value := next(mi.inner_iter);
                if value do return value;

                mi.get_new_inner = true;
            }

            return .None;
        },

        mi => { close(mi.iterator); })

#overload
flat_map :: (it: Iterator($T), ctx: $Ctx, transform: (T, Ctx) -> Iterator($R)) =>
    generator(
        &.{ iterator = it, transform = transform, inner_iter = Iterator(R).{}, get_new_inner = true, ctx = ctx },

        mi => {
            while true {
                if mi.get_new_inner {
                    mi.get_new_inner = false;
                    switch next(mi.iterator) {
                        case .None do break break;
                        case .Some as t {
                            mi.inner_iter = mi.transform(t, mi.ctx);
                        }
                    }
                }

                value := next(mi.inner_iter);
                if value do return value;

                mi.get_new_inner = true;
            }

            return .None;
        },

        mi => { close(mi.iterator); })




/// Only yields the first `count` values, then closes.
take :: (it: Iterator($T), count: u32) -> Iterator(T) {
    return generator(
        &.{ iterator = it, remaining = count },

        ti => {
            if ti.remaining > 0 {
                ti.remaining -= 1;
                return next(ti.iterator);
            }
            
            return .None;
        },

        ti => { close(ti.iterator); });
}


/// Yields values while the predicate returns true.
take_while :: (it: Iterator($T), predicate: (T) -> bool) -> Iterator(T) {
    return generator(
        &.{ iterator = it, predicate = predicate },

        ti => {
            value := next(ti.iterator);
            if value {
                if ti.predicate(value->unwrap()) {
                    return value;
                }
            }

            return .None;
        },

        ti => { close(ti.iterator); });
}


/// Discards the first `count` values and yields all remaining values.
skip :: (it: Iterator($T), count: u32) -> Iterator(T) {
    return generator(
        &.{ iterator = it, to_skip = count, skipped = false },

        (si: $C) -> ? T {
            while !si.skipped && si.to_skip > 0 {
                si.to_skip -= 1;
                value := next(si.iterator);

                if !value {
                    si.skipped = true;
                    return .None;
                }
            }

            return next(si.iterator);
        },

        si => { close(si.iterator); });
}


/// Discards values while the predicate is true, then yields all values.
skip_while :: #match #local {}

#overload
skip_while :: (it: Iterator($T), predicate: (T) -> bool) -> Iterator(T) {
    return generator(
        &.{ iterator = it, predicate = predicate, skipped = false },

        (si: $C) -> ? T {
            while !si.skipped {
                value := next(si.iterator);

                if !value {
                    si.skipped = true;
                    return .None;
                }

                if !si.predicate(value->unwrap()) {
                    si.skipped = true;
                    return value;
                }
            }

            return next(si.iterator);
        },

        si => { close(si.iterator); });
}

#overload
skip_while :: (it: Iterator($T), ctx: $Ctx, predicate: (T, Ctx) -> bool) -> Iterator(T) {
    return generator(
        &.{ iterator = it, ctx = ctx, predicate = predicate, skipped = false },

        si => {
            while !si.skipped {
                value := next(si.iterator);

                if !value {
                    si.skipped = true;
                    return .None;
                }

                if !si.predicate(value->unwrap(), si.ctx) {
                    si.skipped = true;
                    return value;
                }
            }

            return next(si.iterator);
        },

        si => { close(si.iterator); });
}


/// Combines two iterators into one by yielding a Pair of
/// the value from each of the iterators.
zip :: (left_iterator: Iterator($T), right_iterator: Iterator($R)) -> Iterator(Pair(T, R)) {
    return generator(
        &.{ left_iter = left_iterator, right_iter = right_iterator },

        zi => {
            v1 := next(zi.left_iter);
            v2 := next(zi.right_iter);

            if v1 && v2 {
                return Optional.make(Pair.make(v1->unwrap(), v2->unwrap()));
            }

            return .None;
        },

        zi => { close(zi.left_iter); close(zi.right_iter); });
}


/// Filters and maps at the same time.
///
/// If the provided function returns a None variant of Optional,
/// then the entry is discarded.
///
/// If the provided function returns `Some(x)`, then `x` is yielded.
flatten :: (i: Iterator($T), f: (T) -> ? $R) -> Iterator(R) {
    return generator(
        &.{ i = i, f = f },

        fi => {
            while true {
                v := next(fi.i);
                if !v do break;

                v2 := v->and_then(fi.f);
                if v2 {
                    return v2;
                }
            }
            return .None;
        },

        fi => { close(fi.i); }
    );
}


/// Combines iterators by first yielding all values from
/// one, then yielding all values from the next, and so on.
concat :: (iters: ..Iterator($T)) -> Iterator(T) {
    return generator(
        &.{
            iters = memory.copy_slice(iters, context.temp_allocator),
            idx = 0
        },

        c => {
            while c.idx < c.iters.count {
                curr_iter := c.iters[c.idx];
                value := next(curr_iter);
                if value do return value;

                c.idx += 1;
            }

            return .None;
        },
        
        c => {
            for& c.iters {
                close(*it);
            }
        });
}

/// Yields the same value indefinitely. Useful with `iter.zip`.
const :: (value: $T) -> Iterator(T) {
    return generator(&.{ v = value }, c => Optional.make(c.v));
}

/// Yields a single value, then stops.
single :: (value: $T, dispose: (T) -> void = null_proc) -> Iterator(T) {
    return generator(&.{ v = value, yielded = false, dispose = dispose }, c => {
        if !c.yielded {
            c.yielded = true;
            return Optional.make(c.v);
        }

        return .None;
    }, c => {
        if c.dispose != null_proc {
            c.dispose(c.v);
        }
    });
}


/// Yields a value that contains:
///     1) the value from the iterator,
///     2) an incrementing integer.
enumerate :: #match #local {}

#overload
enumerate :: macro (it: $T/Iterable, start_index: i32 = 0) =>
    #this_package.enumerate(#this_package.as_iter(it), start_index);

#overload
enumerate :: (it: Iterator($T), start_index: i32 = 0) -> Iterator(Enumeration_Value(T)) {
    return generator(
        &.{ iterator = it, current_index = start_index },

        ec => {
            value := next(ec.iterator);
            if value {
                defer ec.current_index += 1;
                return Enumeration_Value(T).{ ec.current_index, value->unwrap() }
                    |> Optional.make();
            }

            return .None;
        },

        ec => { close(ec.iterator); });
}

#local Enumeration_Value :: struct (T: type_expr) {
    index: i32;
    value: T;
}




//
// Iterator creations
//
// Sensible defaults for creating an iterator out of primitive types.
//

#overload
as_iter :: from_array

/// `from_array` has two almost identical implementations,
/// but the details are important here. Normally, `from_array`
/// returns an iterator by value, unless the array is of
/// structures, then it returns an iterator by pointer.
/// This seems weird, but in practice it is closer to what
/// you want, as you don't want to have to copy every structure
/// out of the array. While for primitives, you don't want to
/// dereference it everywhere.
from_array :: #match #local {}

#overload
from_array :: (arr: [] $T/type_is_struct) => generator(
    &.{ data = arr.data, count = arr.count, current = 0 },

    ctx => {
        if ctx.current < ctx.count {
            defer ctx.current += 1;
            return &ctx.data[ctx.current] |> Optional.make();
        }

        return .None;
    }
);

#overload
from_array :: (arr: [] $T, by_pointer: bool) => generator(
    &.{ data = arr.data, count = arr.count, current = 0 },

    ctx => {
        if ctx.current < ctx.count {
            defer ctx.current += 1;
            return &ctx.data[ctx.current] |> Optional.make();
        }

        return .None;
    }
);

#overload
from_array :: (arr: [] $T) => generator(
    &.{ data = arr.data, count = arr.count, current = 0 },

    ctx => {
        if ctx.current < ctx.count {
            defer ctx.current += 1;
            return ctx.data[ctx.current] |> Optional.make();
        }

        return .None;
    }
);


/// Iterators created from pointers to dynamic arrays are
/// special, because they support the #remove directive.
#local
generic_dynamic_array_as_iter :: (x: &[..] $T, $access: Code, $return_type: type_expr) => {
    Context :: struct (T: type_expr) {
        arr: &[..] T;
        current: u32;
    }

    c := new_temp(Context(T));
    c.arr = x;

    next :: (use _: &Context($T), $access: Code) => {
        if current < arr.count {
            defer current += 1;
            return (#unquote access) |> Optional.make();

        } else {
            return .None;
        }
    }

    remove :: (use _: &Context($T)) {
        //
        // This is current - 1 because current will have already
        // been incremented by the time this element calls #remove.
        array.delete(arr, current - 1);
        current -= 1;
    }

    return return_type.{
        data  = c,
        next  = #solidify next { T = T, access = access },
        remove = #solidify remove { T = T },
    };
}


#overload
as_iter :: macro (x: &[..] $T) => {
    G :: generic_dynamic_array_as_iter
    return G(x, [](arr.data[current]), Iterator(T));
}

#overload
as_iter :: macro (x: &[..] $T, by_pointer: bool) => {
    G :: generic_dynamic_array_as_iter
    return G(x, [](&arr.data[current]), Iterator(&T));
}

#overload
as_iter :: (r: range) => generator(
    &.{ r = r, v = r.low },
    (ctx: $C) -> ? i32 {
        if ctx.r.step > 0 {
            if ctx.v >= ctx.r.high {
                return .None;
            } else {
                defer ctx.v += ctx.r.step;
                return ctx.v;
            }

        } else {
            if ctx.v < ctx.r.high {
                return .None;
            } else {
                defer ctx.v += ctx.r.step;
                return ctx.v;
            }
        }
    });


#overload
as_iter :: (r: range64) => generator(
    &.{ r = r, v = r.low },
    (ctx: $C) -> ? i64 {
        if ctx.r.step > 0 {
            if ctx.v < ctx.r.high {
                defer ctx.v += ctx.r.step;
                return ctx.v;
            } else {
                return .None;
            }

        } else {
            if ctx.v >= ctx.r.high {
                defer ctx.v += ctx.r.step;
                return ctx.v;
            } else {
                return .None;
            }
        }
    });


//
// Iterator reducing
//

find :: #match #local {}

#overload
find :: macro (it: $T/Iterable, predicate: $F) =>
    #this_package.find(#this_package.as_iter(it), predicate);

#overload
find :: (it: Iterator($T), predicate: (T) -> bool) -> ? T {
    for v in it {
        if predicate(v) {
            return v;
        }
    }

    return .{};
}


/// Incremently calls `combine` on the yielded value and the
/// accumulated value, producing a new accumulated value. Returns
/// the final accumulated value.
fold :: #match #local {}

#overload
fold :: macro (it: $T/Iterable, init: $R, combine: $S) =>
    #this_package.fold(#this_package.as_iter(it), init, combine);

#overload
fold :: (it: Iterator($T), initial_value: $R, combine: (T, R) -> R) -> R {
    result := initial_value;

    for value in it {
        result = combine(value, result);
    }

    return result;
}

/// Incremently calls `combine` on the yielded value and the
/// accumulated value, producing a new accumulated value. Returns
/// the final accumulated value.
fold1 :: #match #local {}

#overload
fold1 :: macro (it: $T/Iterable, combine: $S) =>
    #this_package.fold1(#this_package.as_iter(it), combine);

#overload
fold1 :: (it: Iterator($T), combine: (T, T) -> T) -> ? T {
    maybe_result := next(it);
    if !maybe_result do return .None;

    result := maybe_result->unwrap();
    for value in it {
        result = combine(value, result);
    }

    return result;
}



///
scan :: #match #local {}

#overload
scan :: macro (it: $T/Iterable, init: $R, combine: $S) =>
    #this_package.scan(#this_package.as_iter(it), init, combine)

#overload
scan :: (it: Iterator($T), initial_value: $R, combine: (T, R) -> R) -> Iterator(R) {
    return generator(
        &.{ value = initial_value, combine = combine, iterator = it }

        (ctx: &$C) -> ? R {
            switch next(ctx.iterator) {
                case .None do return .None
                case .Some as yielded {
                    ctx.value = ctx.combine(yielded, ctx.value)
                    return ctx.value
                }
            }
        }

        (ctx: &$C) {
            close(ctx.iterator)
        }
    )
}


///
scan1 :: #match #local {}

#overload
scan1 :: macro (it: $T/Iterable, combine: $S) =>
    #this_package.scan1(#this_package.as_iter(it), combine)

#overload
scan1 :: (it: Iterator($T), combine: (T, T) -> T) -> Iterator(T) {
    return generator(
        &.{ value = next(it), combine = combine, iterator = it }

        (ctx: &$C) -> ? T {
            if !ctx.value do return .None

            defer {
                ctx.value = switch next(ctx.iterator) {
                    case .None => (? T).{ None = .{} }
                    case .Some as yielded => ctx.combine(yielded, ctx.value!)
                }
            }

            return ctx.value
        }

        (ctx: &$C) {
            close(ctx.iterator)
        }
    )
}


/// Returns how many times the `cond` was true.
count :: #match #local {}

#overload
count :: macro (it: $T/Iterable, cond: $F) =>
    #this_package.count(#this_package.as_iter(it), cond);

#overload
count :: (it: Iterator($T), cond: (T) -> bool) -> i32 {
    c := 0;
    for value in it do if cond(value) do c += 1;
    return c;
}



/// Returns if `cond` returned true for *any* yielded value.
some :: #match #local {}

#overload
some :: macro (it: $T/Iterable, cond: $F) =>
    #this_package.some(#this_package.as_iter(it), cond);

#overload
some :: (it: Iterator($T), cond: (T) -> bool) -> bool {
    for value in it do if cond(value) do return true;
    return false;
}


/// Returns if `cond` returned true for *all* yielded values.
every :: #match #local {}

#overload
every :: macro (it: $T/Iterable, cond: $F) =>
    #this_package.every(#this_package.as_iter(it), cond);

#overload
every :: (it: Iterator($T), cond: (T) -> bool) -> bool {
    for value in it do if !cond(value) do return false;
    return true;
}

/// Returns the sum of all yield values, using the `+` operator.
sum :: #match #local {}

#overload
sum :: macro (it: $T/Iterable) =>
    #this_package.sum(#this_package.as_iter(it));

#overload
sum :: (it: Iterator($T)) -> T {
    val := T.{};

    for v in it {
        val = val + v;
    }

    return val;
}


/// Places all yielded values into a dynamically allocated array,
/// using the allocator provided (context.allocator by default).
to_array :: (it: Iterator($T), allocator := context.allocator) -> [..] T {
    arr := array.make(T, allocator=allocator);
    for v in it do array.push(&arr, v);

    return arr;
}

/// Places all yielded values into a Map, with the `first` member
/// being the key, and the `second` member being the value.
to_map :: (it: Iterator(Pair($K, $V)), allocator := context.allocator) -> Map(K, V) {
    m := builtin.make(Map(K, V), allocator=allocator);
    for p in it {
        m->put(p.first, p.second);
    }
    return m;
}

/// Collects elements into an array, or a map, depending on if the
/// iterator produces a Pair(K, V) or not.
collect :: #match {
    to_array
}


/// Produces an iterator that first yields all values from the
/// first iterable, combined with the first yield value from the
/// second iterable. Then, steps the second iterable, and repeats.
///
/// For example,
///
///      iter.prod(1 .. 4, 1 .. 3)
///
/// Would yield:
///      (1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2)
prod :: #match #local {}

#overload
prod :: macro (x: $I/Iterable, y: $I2/Iterable) => {
    return #this_package.prod(x, #this_package.as_iter(y));
}

#overload
prod :: (x: $I1/Iterable, y_iter: Iterator($Y)) => {
    y_val := next(y_iter)

    return generator(
        &.{
            x = x,
            x_iter = as_iter(x),

            y_iter = y_iter,
            y_val  = y_val
        },

        ctx => {
            switch ctx.y_val {
                case .Some as y {
                    next(ctx.x_iter)->with([x] {
                        return Optional.make(Pair.make(x, y))
                    })
                }

                case .None do return .None
            }

            switch next(ctx.y_iter) {
                case .None do return .None

                case .Some as new_y_val {
                    ctx.y_val = new_y_val

                    close(ctx.x_iter)
                    ctx.x_iter = as_iter(ctx.x)
                    x_val := next(ctx.x_iter)
                    if !x_val do return .None
                    
                    return Optional.make(Pair.make(x_val!, ctx.y_val!))
                }
            }
        }
    )
}


/// Simple iterator comprehensions, in the same vein
/// as Pythons comprehension syntax.
/// 
/// Python:
///     results = [it * 2 for it in [1, 2, 3, 4, 5]]
/// Onyx:
///     results := iter.comp(u32.[1, 2, 3, 4, 5], [it](it * 2));
comp :: #match #local {}

#overload
comp :: macro (i: Iterator(&$V), value: Code) => {
    it: V;
    a := make([..] typeof #unquote value(it));

    for __it in i {
        it := *__it;
        a << (#unquote value(it));
    }
    return a;
}

#overload
comp :: macro (i: Iterator($V), value: Code) => {
    it: V;
    a := make([..] typeof #unquote value(it));

    for i do a << (#unquote value(it));
    return a;
}

#overload
comp :: macro (i: $I/Iterable, value: Code) =>
    #this_package.comp(#this_package.as_iter(i), value);


/// Using the polymorph solving system, you can write type
/// free versions of arbitrary iterators. This is used
/// heavily by many of the functions defined above.
/// 
/// Maybe at some point an alternate allocator would be good
/// for this? For now, I think the temporary allocator is sufficient.
generator :: #match #local {}

#overload
generator :: (ctx: &$Ctx, gen: (&Ctx) -> ? $T) -> Iterator(T) {
    v := raw_alloc(context.temp_allocator, sizeof Ctx);
    core.memory.copy(v, ctx, sizeof Ctx);

    return .{
        data = v,
        next = gen
    };
}

#overload
generator :: (ctx: &$Ctx, gen: (&Ctx) -> ? $T, close: (&Ctx) -> void) -> Iterator(T) {
    v := raw_alloc(context.temp_allocator, sizeof Ctx);
    core.memory.copy(v, ctx, sizeof Ctx);

    return .{
        data = v,
        next = gen,
        close = close
    };
}

generator_no_copy :: #match #local {}

#overload
generator_no_copy :: (ctx: &$Ctx, gen: (&Ctx) -> ? $T) =>
    Iterator(T).{ ctx, gen }

#overload
generator_no_copy :: (ctx: &$Ctx, gen: (&Ctx) -> ? $T, close: (&Ctx) -> void) =>
    Iterator(T).{ ctx, gen, close }


/// Groups like elements together using the provided comparison function.
/// `cmp` should return `true` if the two elements are equal.
/// The items should be sorted in such a way that the equal items appear next to each other. 
group_by :: (it: Iterator($T), cmp: (T, T) -> bool) -> Iterator(Pair(T, Iterator(T))) {
    return generator(
        &.{ outer_iter = it, cmp = cmp, key_item = next(it), yielded_key = false }

        (ctx: &$Ctx) -> ? Pair(T, Iterator(T)) {
            if !ctx.key_item do return .None

            ctx.yielded_key = false

            return Pair.make(
                ctx.key_item->unwrap(),
                generator_no_copy(ctx, ctx => {
                    if !ctx.yielded_key {
                        ctx.yielded_key = true
                        return ctx.key_item
                    }

                    switch next(ctx.outer_iter) {
                        case .None {
                            ctx.key_item = .None
                            return .None
                        }
                        case .Some as next_item {
                            if ctx.cmp(ctx.key_item->unwrap(), next_item) {
                                return next_item
                            }

                            ctx.key_item = next_item
                            return .None
                        }
                    }
                })
            )
        }
    )
}



#if runtime.Multi_Threading_Enabled {
    #local sync :: core.sync

    // A simple iterator transformer that protects
    // the retrieving of the next value by using
    // a mutex, making the iterator thread-safe.
    distributor :: #match #local {}

    #overload
    distributor :: macro (it: $T/Iterable) =>
        #this_package.distributor(#this_package.as_iter(it));

    #overload
    distributor :: (it: Iterator) -> Iterator(it.Iter_Type) {
        Context :: struct (T: type_expr) {
            mutex: sync.Mutex;
            iterator: Iterator(T);
            ended := false;
        }

        next :: (use c: &Context($T)) -> ? T {
            if ended do return .None;
            sync.scoped_mutex(&mutex);

            v := iterator.next(iterator.data);
            if !v {
                ended = true;
            }
            return v;
        }

        close :: (use c: &Context($T)) {
            sync.mutex_destroy(&c.mutex);
            cfree(c);
        }

        // This iterator's context is allocated from the heap because
        // generally, a distributor iterator will be used across theads
        // in parallel programs. Programs such as those *might* make
        // a lot of iterators in their theads and I don't want to cause
        // the distributor's context be overwritten.
        c := new(Context(it.Iter_Type));
        sync.mutex_init(&c.mutex);
        c.iterator = it;

        return .{c, #solidify next {T=it.Iter_Type}, #solidify close {T=it.Iter_Type}};
    }

    /// Allows you to easily write a parallelized for-loop over an iterator.
    /// For example,
    /// 
    ///     iter.parallel_for(1 .. 100, 4, &.{}) {
    ///         printf("Thread {} has {}!\n", context.thread_id, it);
    ///     }
    parallel_for :: #match #local {}

    #overload
    parallel_for :: macro (iterable: $I/Iterable, thread_count: u32, thread_data: &$Ctx, body: Code) {
        #this_package.parallel_for(
            #this_package.as_iter(iterable),
            thread_count,
            thread_data,
            body
        );
    }

    #overload
    parallel_for :: macro (iter: Iterator($T), thread_count: u32, thread_data: &$Ctx, body: Code) {
        use core {thread, alloc}

        if thread_count != 0 {
            dist := #this_package.distributor(iter);
            t_data := &.{iter = &dist, data = thread_data};

            threads := alloc.array_from_stack(thread.Thread, thread_count - 1);
            for& threads do thread.spawn(it, t_data, #solidify thread_function {body=body});

            thread_function(t_data, body);

            for& threads do thread.join(it);
            if dist.close != null_proc do dist.close(dist.data);
        }

        thread_function :: (__data: &$T, $body: Code) {
            thread_data := __data.data;
            for #no_close *__data.iter {
                #unquote body;
            }
        }
    }
}
