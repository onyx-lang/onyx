package core.heap

use core.array

Heap :: struct (T: type_expr) {
    data: [..] T;
    compare: (T, T) -> i32 = null_proc;
}

make :: ($T: type_expr, cmp: (T, T) -> i32 = null_proc) -> Heap(T) {
    h: Heap(T);
    init(&h, cmp);
    return h;
}

init :: (use heap: &Heap, cmp: (heap.T, heap.T) -> i32 = null_proc) {
    array.init(&data);
    compare = cmp;
}

insert :: (use heap: &Heap, v: heap.T) {
    data << v;
    shift_up(heap, data.count - 1);
}

#operator << macro (heap: Heap($T), v: T) {
    #this_package.insert(&heap, v);
}

remove_top :: (use heap: &Heap) -> heap.T {
    x := data[0];
    array.fast_delete(&data, 0);
    shift_down(heap, 0);
    return x;
}

#local {
    heap_parent :: macro (index) => (index - 1) / 2
    heap_lchild :: macro (index) => (index * 2) + 1
    heap_rchild :: macro (index) => (index * 2) + 2

    shift_down :: (use heap: &Heap, idx: i32) {
        index := idx;
        while true {
            min_index := index;

            l := heap_lchild(index);
            if l < data.count {
                if compare(data[l], data[min_index]) < 0 {
                    min_index = l;
                }
            }

            r := heap_rchild(index);
            if r < data.count {
                if compare(data[r], data[min_index]) < 0 {
                    min_index = r;
                }
            }

            if index != min_index {
                tmp := data[index];
                data[index] = data[min_index];
                data[min_index] = tmp;
                index = min_index;
                continue;
            }

            break;
        }
    }

    shift_up :: (use heap: &Heap, idx: i32) {
        index := idx;
        while index > 0 {
            parent := heap_parent(index);
            if compare(data[parent], data[index]) <= 0 do break;

            tmp := data[parent];
            data[parent] = data[index];
            data[index] = tmp;
            index = parent;
        }
    }
}

