/// AtomicAllocator wraps another allocator in a mutex, 
/// ensuring that every allocation is thread-safe. This 
/// is not needed for the general purpose heap allocator, 
/// as that already has a thread-safe implementation.
package core.alloc.atomic

// This can only be used when the core.sync package exists.
#if #defined(package core.sync) {


use core.alloc
use core.sync

/// Stores internal details used by the atomic allocator.
///
/// Simply the wrapped allocator and the mutex.
AtomicAllocator :: struct {
    a: Allocator;
    m: sync.Mutex;
}

/// Creates a new AtomicAllocator over an existing allocator.
make :: (a: Allocator) -> AtomicAllocator {
    atomic: AtomicAllocator = .{ a = a };

    sync.mutex_init(&atomic.m);

    return atomic;
}

/// Makes an allocator out of the atomic allocator state.
make_allocator :: (atomic: &AtomicAllocator) =>
    Allocator.{ atomic, atomic_alloc };

#overload
alloc.as_allocator :: make_allocator


#local
atomic_alloc :: (atomic: &AtomicAllocator, aa: AllocationAction, size: u32, align: u32, oldptr: rawptr) -> rawptr {
    sync.scoped_mutex(&atomic.m);
    return atomic.a.func(atomic.a.data, aa, size, align, oldptr);
}


}
