/// This allocator is great for temporary memory, such as returning
/// a pointer from a function, or storing a formatted string. The
/// memory allocated using this allocator does not need to be freed.
/// The idea is that as you keep allocating you will "wrap around"
/// and start writing over memory that was allocated before. For this
/// reason, it is not safe to use this for any kind of permanent
/// allocation. Also, be wary that you provide this allocator with
/// a buffer big enough to store as much data as you are going to need
/// at any given time. 
package core.alloc.ring

use core

RingState :: struct {
    base_ptr : rawptr;
    size     : u32;
    curr     : u32;
}

#local
ring_alloc_proc :: (data: rawptr, aa: AllocationAction, size: u32, align: u32, oldptr: rawptr) -> rawptr {
    ss := cast(&RingState) data;

    if aa == .Alloc {
        retval := null;
        if ss.curr + size < ss.size {
            retval = cast([&] u8) ss.base_ptr + ss.curr;
            ss.curr += size;
        }
        elseif size <= ss.size {
            retval = ss.base_ptr;
            ss.curr = size;
        }

        return retval;
    }

    return null;
}

make :: (buffer: [] u8) -> RingState {
    return .{
        base_ptr = buffer.data,
        size     = buffer.count,
        curr     = 0,
    };
}

#match core.alloc.as_allocator make_allocator
make_allocator :: (rs: &RingState) -> Allocator {
    return .{
        func = ring_alloc_proc,
        data = rs,
    };
}

