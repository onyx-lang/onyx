/// "Garbage collection" is not somthing Onyx has. Even things
/// like reference counted pointers is not something Onyx can
/// do, because of Onyx's simpler semantics. That being said,
/// with custom allocators and some careful design, GC is
/// "achievable". This allocator wraps another allocator. With
/// each allocation, a little extra space is allocated to build
/// a linked list of all allocations made. This way, when the
/// memory is done being used, everything can be freed automatically.
///
/// The `auto` macro makes this allocator very easy to use:
///     core.alloc.gc.auto() {
///         // Every allocation here will automatically be freed
///     }
package core.alloc.gc


use runtime
use core {package, *}

GCState :: struct {
    backing_allocator: Allocator;
    first: &GCLink;
}

GCLink :: struct {
    prev: &GCLink;
    next: &GCLink;
    magic_number: u32;
}

make :: (backing := context.allocator) -> GCState {
    hs: GCState;
    hs.backing_allocator = backing;
    return hs;
}

clear :: (hs: &GCState) {
    Debug_Printing :: #defined(runtime.vars.Enable_GC_Debug)

    count := 0;
    size := 0;

    while l := hs.first; l != null {
        n := l.next;

        if l.magic_number == GC_Link_Magic_Number {
            #if Debug_Printing {
                count += 1;
                size += *cast(&u32) (cast([&] u8) l - 8);
            }

            l.magic_number = 0;
            raw_free(hs.backing_allocator, l);
        }

        l = n;
    }

    #if Debug_Printing {
        logf(.Debug, "Garbage collected items: {}", count);
        logf(.Debug, "Garbage collected bytes: {}", size);
    }

    hs.first = null;
}

#match core.alloc.as_allocator make_allocator
make_allocator :: (hs: &GCState) -> Allocator {
    return Allocator.{
        func = gc_alloc_proc,
        data = hs
    };
}

auto :: #match {
    macro () {
        use core.alloc {package, gc}
        
        gcs := gc.make();
        old_allocator := context.allocator;
        context.allocator = alloc.as_allocator(&gcs);
        defer {
            gc.clear(&gcs);
            context.allocator = old_allocator;
        }
    },

    macro (body: Code) -> i32 {
        auto :: auto

        auto(); 
        #unquote body;

        return 0;
    }
}



GC_Manually_Free_Magic_Number :: 0xface1337

#local GC_Link_Magic_Number :: 0x1337face

#local gc_alloc_proc :: (data: &GCState, aa: AllocationAction, size: u32, align: u32, oldptr: rawptr) -> rawptr {

    old: &GCLink;

    if oldptr != null {
        old = (cast([&] GCLink) oldptr) - 1;

        //
        // If this allocated space was not from an gc allocator,
        // just try to free it using the backing allocator.
        if old.magic_number != GC_Link_Magic_Number {
            return data.backing_allocator.func(
                data.backing_allocator.data, aa, size, align, oldptr
            );
        }
    }

    if aa == .Resize || aa == .Free {
        if old.prev {
            old.prev.next = old.next;
        } else {
            data.first = old.next;
        }

        if old.next {
            old.next.prev = old.prev;
        }
    }

    //                                                   \/
    // HEAP DATA              | GCLINK                   | Your actual allocation
    // POINTERS MAGIC NUMBERS | prev, next, magic_number | bytes of data...

    newptr: &GCLink = data.backing_allocator.func(
        data.backing_allocator.data, aa,
        size + sizeof GCLink, align, old);

    if aa == .Alloc || aa == .Resize {
        if newptr != null {
            newptr.magic_number = GC_Link_Magic_Number;
            newptr.next = data.first;
            newptr.prev = null;

            if data.first != null {
                data.first.prev = newptr;
            }

            data.first = newptr;
        }
    }

    return cast([&] GCLink, newptr) + 1;
}

/// Removes an allocation from the garbage collectors tracking list,
/// so it will not be freed automatically.
untrack :: (ptr: rawptr) -> bool {
    link: &GCLink = (cast([&] GCLink) ptr) - 1;

    if link.magic_number != GC_Link_Magic_Number {
        return false;
    }

    link.magic_number = GC_Manually_Free_Magic_Number;
    return true;
}

