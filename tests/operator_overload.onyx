#load "core/module"

use core {*}

Complex :: struct {
    re : f32 = 0
    im : f32 = 0
}

#operator+ (a: Complex, b: Complex) -> Complex {
    return Complex.{ a.re + b.re, a.im + b.im }
}

#operator- (a: Complex, b: Complex) -> Complex {
    return Complex.{ a.re - b.re, a.im - b.im }
}

#operator* (a: Complex, b: Complex) -> Complex {
    return Complex.{ a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re }
}

C :: (re: f32, im: f32) -> Complex do return Complex.{ re, im }



Vec :: struct (T: type_expr, N: i32) {
    data: [N] T
}

#operator+ (a: Vec($T, $N), b: Vec(T, N)) -> Vec(T, N) {
    out : Vec(T, N)
    for i in 0 .. N do out.data[i] = a.data[i] + b.data[i]
    return out
}

#operator- (a: Vec($T, $N), b: Vec(T, N)) -> Vec(T, N) {
    out : Vec(T, N)
    for i in 0 .. N do out.data[i] = a.data[i] - b.data[i]
    return out
}

#operator* (a: Vec($T, $N), s: T) -> Vec(T, N) {
    out : Vec(T, N)
    for i in 0 .. N do out.data[i] = a.data[i] * s
    return out
}

#operator* (a: Vec($T, $N), b: Vec(T, N)) -> T {
    res := T.{}
    for i in 0 .. N do res += a.data[i] * b.data[i]
    return res
}

join :: (a: Vec($T, $N), b: Vec(T, $M)) -> Vec(T, N + M) {
    out : Vec(T, N + M)
    for i in 0 .. N do out.data[i]     = a.data[i]; 
    for i in 0 .. M do out.data[i + N] = b.data[i]; 
    return out
}

make_vec :: (data: [$N] $T) -> Vec(T, N) {
    return .{ data }
}

main :: (args: [] cstr) {
    {
        a := C(2, 3)
        b := C(0, 1)

        c := a + b
        printf("({}, {})\n", c.re, c.im)

        c = a - b
        printf("({}, {})\n", c.re, c.im)

        c = a * b
        printf("({}, {})\n", c.re, c.im)
    }

    {
        a := make_vec(f32.[10, 20])
        b := make_vec(f32.[3,  4])
        c := a + b
        printf("({}, {})\n", c.data[0], c.data[1])

        d := make_vec(f32.[2, 3, 5, 7])
        e := join(d, c)
        for v in e.data do printf("{} ", v)
        print("\n")
    }

    {
        a := make_vec(Complex.[C(2, 3), C(0, 1)])
        b := make_vec(Complex.[C(1, 0), C(3, 7)])
        c := a * b
        printf("({}, {})\n", c.re, c.im)
    }

    println(test_overload("World!", "Hello!"))
}

test_overload :: #match {
    (x: $T, y: T)  -> T { return x; },
    (x: $T, y: $R) -> R { return y; },
}
