#load "core/module"

use core {*}

main :: () {
   a := f32.[ 1, 2, 3, 4 ]
   b := f32.[ 1, 2, 3, 4 ]
   c := add(a, b)
   println(c)

   d: Foo(typeof c)
   d.values = c
}

Adder :: interface(T: type_expr) {
    t as T

    { t + t } -> T
}

add :: (a, b: [$N]$T) -> [N] T where Adder(T), N > 0, N <= 4
{
   return a + b
}

CanBeIndexed :: interface(T: type_expr) {
    t as T

    t[0]
}

Foo :: struct (T: type_expr) where CanBeIndexed(T) {
   values: T
}


