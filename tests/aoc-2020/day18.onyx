#load "core/module"

use core {*}

parse_factor :: (file: &str) -> u64 {
	str.strip_leading_whitespace(file)

	switch file.data[0] {
		case '0' ..= '9' {
			return conv.parse_int(file)
		}

		case '(' {
            str.advance(file, 1)

			value := parse_expression_mul(file)

            str.strip_leading_whitespace(file)
            str.advance(file, 1)

			return value
		}
	}
	
	return 0
}

parse_expression_add :: (file: &str) -> u64 {
	str.strip_leading_whitespace(file)

	left := parse_factor(file)

	str.strip_leading_whitespace(file)
	while file.data[0] == '+' {
		op    := file.data[0]
        str.advance(file, 1)

		right := parse_factor(file)

		left += right

		str.strip_leading_whitespace(file)
	}

	return left
}

parse_expression_mul :: (file: &str) -> u64 {
    str.strip_leading_whitespace(file)

	left := parse_expression_add(file)

    str.strip_leading_whitespace(file)
	while file.data[0] == '*' {
		op    := file.data[0]
        str.advance(file, 1)

		right := parse_expression_add(file)

		left *= right

		str.strip_leading_whitespace(file)
	}

	return left
}

main :: (args: [] cstr) {
	contents := #file_contents "./input/day18.txt"
    file := contents

	total: u64 = 0
	while !str.empty(file) {
		total += parse_expression_mul(&file)
	}

	printf("Total: {}\n", total)
}
