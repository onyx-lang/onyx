

use core {*}

Ship :: struct {
    x : i32 = 0
    y : i32 = 0

    fx : i32 = 1
    fy : i32 = 0
}

rotate_left :: (ship: &Ship) {
    ofx := ship.fx
    ofy := ship.fy

    ship.fx = ofy
    ship.fy = -ofx
}

rotate_right :: (ship: &Ship) {
    ofx := ship.fx
    ofy := ship.fy

    ship.fx = -ofy
    ship.fy = ofx
}

turn_around :: (ship: &Ship) {
    ship.fx = -ship.fx
    ship.fy = -ship.fy
}

main :: (args: [] cstr) {
    contents := #file_contents "./input/day12.txt"

    file := contents

    ship := Ship.{ fx = 10, fy = -1 }
    while !str.empty(file) {
        dir := file[0]
        str.advance(&file, 1)

        val := cast(u32, conv.parse_int(&file))
        str.advance_line(&file); 
        
        switch dir {
            case 'N' do ship.fy -= val
            case 'E' do ship.fx += val
            case 'S' do ship.fy += val
            case 'W' do ship.fx -= val
            case 'F' {
                ship.x += ship.fx * val
                ship.y += ship.fy * val
            }

            case 'L' do switch val {
                case 90 do rotate_left(&ship)
                case 180 do turn_around(&ship)
                case 270 do rotate_right(&ship)
            }

            case 'R' do switch val {
                case 90 do rotate_right(&ship)
                case 180 do turn_around(&ship)
                case 270 do rotate_left(&ship)
            }
        }
    }

    printf("Ship distance: {}\n", math.abs(ship.x) + math.abs(ship.y))
}
