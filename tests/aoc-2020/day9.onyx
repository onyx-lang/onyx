#load "core/module"

use core {*}

find_contiguous_subarray_with_sum :: (nums: [..] u64, sum: u64) -> (i32, i32) {
    start := 0
    end   := 0
    con_sum: u64 = nums[0]

    for i in 1 .. nums.count {
        end += 1
        con_sum += nums[end]

        if con_sum == sum do break

        while con_sum > sum && start <= end {
            con_sum -= nums[start]
            start += 1

            if con_sum == sum do break break
        }
    }

    return start, end
}

main :: (args: [] cstr) {
    contents := #file_contents "./input/day9.txt"

    file := contents

    nums := Array.make(u64, 32)
    defer Array.free(&nums)

    while !str.empty(file) {
        num := conv.parse_int(&file)
        Array.push(&nums, num)
    }

    preamble_length :: 25

    invalid: u64
    for i in 0 .. nums.count {
        if i < preamble_length do continue

        success := false
        for j in 0 .. preamble_length - 1 {
            for k in j + 1 .. preamble_length {
                if nums[i - j - 1] + nums[i - k - 1] == nums[i] {
                    success = true
                    break break
                }
            }
        }

        if !success {
            invalid = nums[i]
            break
        }
    }

    printf("Invalid number: {}\n", invalid)

    start, end := find_contiguous_subarray_with_sum(nums, invalid)

    max := Array.fold(nums.data[start .. end + 1], cast(u64) 0, math.max)
    min := Array.fold(nums.data[start .. end + 1], cast(u64) max, math.min)

    printf("Extrema sum: {}\n", min + max)
}
