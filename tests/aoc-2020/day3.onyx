#load "core/module"

use core {*}

Point :: struct {
    x, y : i32
}

LineInterp :: struct {
    ox, oy : i32
    dx, dy : i32
}

line_interp_at :: (use li: LineInterp, t: i32) -> Point {
    return .{ ox + dx * t, oy + dy * t }
}

main :: (args: [] cstr) {
    contents := #file_contents "./input/day3.txt"

    forest := Array.make(u8, 1024)
    defer Array.free(&forest)

    width := 0
    height := 0
    while true {
        line := str.read_until(&contents, '\n')
        str.advance(&contents, 1)
        if line.count == 0 do break

        width = line.count
        height = height + 1

        for ch in line do Array.push(&forest, ch)
    }

    lis := LineInterp.[
        .{ 0, 0, 1, 1 },
        .{ 0, 0, 3, 1 },
        .{ 0, 0, 5, 1 },
        .{ 0, 0, 7, 1 },
        .{ 0, 0, 1, 2 },
    ]

    tree_prod: u64 = 1

    for li in lis {
        tree_count: u64 = 0
        while i := 0; true {
            p := line_interp_at(li, i); 
            if p.y >= height || p.y < 0 do break; 
            i += 1

            p.x %= width

            if forest[p.x + p.y * width] == '#' do tree_count += 1
        }

        tree_prod *= tree_count
    }

    printf("Tree product: {}\n", tree_prod)
}
