// Controlling the symbols in scope is important to maintaining well structured
// and factored code. In Onyx, the most powerful feature available to do this is
// the 'use' keyword. It allows you to bring in symbols from another namespace into
// the currently scope. In Onyx, a "namespace" simply referers to something contains
// names, generally something you can use the "." operator on. Some of the examples
// include:
//   - structs with static (::) members
//   - struct members
//   - variables with a struct or pointer to a struct type
//   - packages
//   - enums

// Please note, 'use' is a rather "alpha-tier" feature at the moment, meaning it works in
// most cases, but can easily break and require you to write the code without it. This
// is being address and hopefully in the next couple months it will be much more robust.



use core {*}

main :: (args: [] cstr) {
    // Here are the uses of 'use' currently.

    {
        // You can 'use' a package. You hopefully already knew this.
        // This allows you to use the 'core.alloc' package in this scope
        // under the name 'alloc'.
        use core.alloc

        // You can also restrict and partially rename the symbols that collide
        use core.string { string_free :: free }
    }

    {
        // You can use everything inside of a package using a '*' between the include list.
        use core.string {*}

        s := "   Some string ..."
        t := strip_leading_whitespace(s); // This would have to be 'string.strip_leading_whitespace' otherwise.
        println(t)
    }
    
    {
        // You can 'use' parameters to a function. This effectively makes this
        // procedure behave like a 'method' for Dummy. You can access all members
        // of dummy with having to say 'dummy.' everywhere. Note, this is one of the
        // most alpha-tier parts of 'use', so if you are running into error, report
        // an issue and (sadly) go back to writing without the 'use'.
        //
        // One side note, you can 'use' more than one parameter, and it doesn't have to
        // be the first parameter. This can create decent self-documenting code because
        // a procedure with two used parameters implies that it is a 'cross-cutting'
        // procedure between two areas of concern.

        basically_a_method :: (use dummy: ^Dummy) {
            printf("Dummy with name '{}', and age '{}'.\n", name, age)
        }

        dummy := Dummy.{ "Phil", 15 }
        basically_a_method(^dummy)

        Dummy :: struct {
            name : str
            age  : i32
        }
    }
    
    {
        // You can 'use' struct members that are structures.
        // This is already explained in the struct example.
    }
}
