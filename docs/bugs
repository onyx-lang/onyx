List of known bugs:

[ ] partially solidifying procedures messes up poly param indices, which causes them to
    not be solved correctly.

[ ] macros cannot use 'use'.

    Vec2 :: struct { x, y : f32; }

    foo :: macro (use v: Vec2) {
        println(x); // Doesn't work
    }

[ ] macros don't work with any:
    format :: macro (format: str, args: ..any) -> str {
        buffer: [1024] u8;
        return conv.str_format_va(buffer, format, args);
    }

[ ] Compound assignment operators such as += evaluate the location of their left-value twice.
    Not only is this bad for efficiency, if the value requires calling a function, that
    function will be called twice instead of once. This is a simple code generation fix,
    but will require not destroying this information in the checking phase of the compiler.

[ ] Top level implicit typed arrays/struct literals are not correctly being marked as compile-time.

    Vec2 :: struct { x, y: i32; }
    
    Hex_Directions := Vec2.[
        .{  1, 0 }, .{  1, -1 }, .{ 0, -1 }, 
        .{ -1, 0 }, .{ -1,  1 }, .{ 0,  1 }, 
    ];

[X] switch statements should work with any type that supports '=='.

[X] I don't know why this doesn't work... It is complaining that it couldn't match
    either of these cases, but if I remove the first, it matches the second. This
    is clearly wrong behavior, but I don't immediately see where the problem is.

    CanCastTo :: interface (T: type_expr, D: type_expr) {
        cast(typeof D) T;
    }

    cast_able :: #match {
        (_: $T, $D: type_expr) -> bool where CanCastTo(T, D) do return true; ,
        (_: any, d: type_expr) -> bool { return false; },
    }

[X] Memory reservation type checking doesn't work how I think it should. This errors for example:

    x: i64 = 1;

[X] Initialization statements on control statements should be better. For example, this should
    be possible:

    if x, y := foo(); x != y {
        // ...
    }

[X] macros are not allowed at the expression level. This is not necessarily a bug, but does
    bring many complications to the table about how resolve this. Current solution is to
    turn expression macros (macros that specify a return value) into a `do` expression.

[X] Enums suck. Make them more powerful.

[X] add `do` expressions:

    x := do {
        a := 1;
        b := 2;
        return a + b;
    };

    So then, expression macros can just do the following:

    add :: macro (x: i32, y: i32) -> i32 do return x + y;

    x := add(1, 2);
    x := do { return 1 + 2; }


[X] Add support for tabs in error messages.

[X] recursive quick-procedures / procedures that use #auto have trouble if the first lexical
    return statement is a recursive call.

    There is now an error message about this. The only other solution would be to use a different
    return statement to resolve the type; however, I believe this breaks the simple rule that
    the first lexical return statement determines the automatic return type.

[X] There is not proper cycle detection in the compiler. Infinite should not be possible.

[X] This currently does not work but I think it should:

    baked_proc :: (x: $T, $func: (T) -> T) -> T {
        return func(x);
    }

    The problem is that 'T' is an unresolved symbol because the context of the function type
    does not have the solved value of T in it.

[X] Segfault when trying to immediately access type inferred array literal.
    println( (.[ 1, 2, 3, 4, 5 ])[0] );

[X] Aliasing in many cases does not work. For example:
    
    SomeNamespace :: struct {
        foo :: () { ... }
        bar :: ...
    }

    {
        SN :: SomeNamespace

        SN.foo()
    }

[X] Enum parsing causes segfaults if the syntax is not EXACTLY what is expected. Some cases that break:
    enum { Foo, Bar, Baz };
    enum { Foo; Bar; Baz };

[X] Using a package in the middle of a procedures removes all remaining statements in the procedure.
    This is mostly likely due to the changes made with use package statements being treated as entities now.
    
    use_package_breaking :: () {
        println("Test 1");

        use foo

        println("Test 2");
    }

[X] Array literals used as default values for struct members can break things.
    
    Foo :: struct {
        arr : [5] u32 = u32.[ 2, 3, 5, 7, 11 ];
    }

    foo := Foo.{};        OR          foo := new(Foo);

[X] There is a segfault when passing an anonymous struct literal to an untyped vararg.
    Should just need to detect this case and provide an error message since this doesn't
    make any sense semantically.
    
    vararg_proc :: (va: ...) {
        ...
    }

    vararg_proc(.{ 1, 2 });


[X] `fallthrough` in a for loop does not emit deferred statements correctly.

List of things to change:
[X] Currently, there is no way to use the initialized members of a structure without using a struct literal.
    There should be a initialize intrinsic procedure that takes a pointer to anything and initializes it.
    For example:

    initialize :: (x: ^$T) -> void #intrinsic ---

    Foo :: struct {
        x := 1;
        y : f32;
    }

    x : Foo;
    initialize(^x);

    // x.x = 1
    // x.y = <uninitialized>

[ ] Add functionality to #solidify that resolves to a procedure given a set of types. For example:
    overloaded :: proc {
        (x: str) { println("String function!"); },
        (x: i32) { println("Int function!"); },
        (x: f32) { println("Float function!"); },
        (x: $T)  { println("Other function!"); },
        (z: $T)  { println("Other function ZZZ!"); },
    }

    int_function :: #solidify overloaded(i32);
    int_function(); // Int function!

    other_function :: #solidify overloaded(range);
    other_function(); // Other function!

    wont_work :: #solidify overloaded(y = i32); // This won't work because overloaded doesn't have a 'y'
    will_work :: #solidify overloaded(z = range); // This will work because overloaded does have a 'z'

    Obviously this will also work on a non-overloaded, only polymorphic procedure.

[X] Anonymous struct, enum and array literals.
