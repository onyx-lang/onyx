// Currently the only way for something to be generic and type checked
// in Onyx is to use polymorphic procedures and overloaded procedures
// to allow a procedure to be statically duck-typed after it has been
// determined that this is the procedure you are calling (think Map
// and hash.to_u32). This has been okay, but it leads to some grossness
// in the language semantics and the kinds of error messages that are
// producible.
//
// For example, it is not immediately clear that in order to make a Map
// or a Set out of a type, you need to declare a match option for hash.to_u32
// and define '==' for the type. This is kind of probablimatic and doesn't
// make for great self explanatory or maintainable code. Also I don't like
// #match at all, as it feels like a complete and utter hack.
//

// Ignore everything that is said below. It all sounded like a good idea
// at one point, until I started implementing it when I realized that not
// only is it WAY too complicated and adds too much complexity in the compiler
// but it doesn't feel like a natural extension to Onyx.
//
// Instead, 'interfaces' are going to be much much simpler, but to write
// and for the compiler to deal with. Effectively, they are compile time checks
// that assert that a particular set of expressions is valid, and optionally
// return the correct type. They are offered as an extension to overloaded functions
// and polymorphic functions, instead of being a replacement for them. To remedy
// the "#add_match" syntax, some work has gone into the parser to make the following
// legal syntax:

#match hash.to_u32 (x: Vec2) -> u32 { /* .. */ }

// This feels a lot nicer to write and doesn't have the weird line noise of the
// _ and the ,.



ValidKey :: interface (T: type_expr) {
    hash.to_u32(T);
    T == T;
}


// I think that interfaces should be a little bit more powerful than they are now.

Hashable :: interface (T: type_expr) {

    // This syntax seems pretty clean, but it introduces some complications when
    // you actually think about using the type T in the expected type expression.
    { hash.to_u32(T) } -> u32;
}

Ring :: interface (T: type_expr) {
    // This syntax is very clean and easy to read; however, when you think about
    // it for a second, the meaning of T becomes ambiguous...
    // In the {} T is a value of type T, while in the type expression T is a type.
    // Is this okay? Or should you have to say `typeof T` in the type expression?
    // Or should the syntax for interfaces change?

    { T + T } -> T;
    { T - T } -> T;
    { T * T } -> T;
}

Ring :: interface (t: $T) {
    // This syntax is slightly better, as it makes clear where the value is being
    // used and where the type is being used.

    // They polymorphic variable "$T" is just for syntactic consistency. The "$" will
    // always be expected before types in interfaces. Also, all types should just be
    // a single symbol.

    { t + t } -> T;
    { t - t } -> T;
    { t * t } -> T;

    //
    // The only problem I have with this syntax is that it is a little confusing when
    // using the constraint syntax:
    //
    // foo :: (x, y: $T) -> T where Ring(T) {
    //     return x + y - x * y; 
    // }
    //
    // Because you are "calling" Ring with a type, not a value of type T. This might
    // be worth giving up the syntactic consistency tho, just to avoid confusion about
    // if T is a type or a value.
    //
}
